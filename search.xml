<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>BoxHacker新手入门</title>
      <link href="/2022/05/25/boxHacker%E6%96%B0%E6%89%8B%E5%85%A5%E9%97%A8-1/"/>
      <url>/2022/05/25/boxHacker%E6%96%B0%E6%89%8B%E5%85%A5%E9%97%A8-1/</url>
      
        <content type="html"><![CDATA[<h1 id="连接到外国网站的网络https-app-hackthebox-com-home"><a href="#连接到外国网站的网络https-app-hackthebox-com-home" class="headerlink" title="连接到外国网站的网络https://app.hackthebox.com/home"></a>连接到外国网站的网络<a href="https://app.hackthebox.com/home">https://app.hackthebox.com/home</a></h1><p><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/20220525221156.png"> </p><ul><li><input disabled="" type="checkbox"> 如图打开家然后点击初识点进行开始<br><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/20220525113953.png"> </li><li><input disabled="" type="checkbox"> 下拉就可以看到如图的三台靶机<br><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/20220525221319.png"> </li><li><input disabled="" type="checkbox"> 使用开放式<code>vpn</code>进行连接<br><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/20220525114040.png">  </li><li><input disabled="" type="checkbox"> <code>tcp 443</code>比较快然后会下载一个文件使用终端在当前目录下使用<code>openvpn</code> 打开即可注意要加上<code>sudo</code>(权限问题)<br><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/20220525114519.png"> </li><li><input disabled="" type="checkbox"> 最后一行即表示成功<br><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/20220525114613.png"> </li><li><input disabled="" type="checkbox"> 生成机器即可<h1 id="Meow"><a href="#Meow" class="headerlink" title="Meow"></a>Meow</h1></li><li><input disabled="" type="checkbox"> 1.What does the acronym VM stand for?（VM是什么的缩写）<br>virtual machine</li><li><input disabled="" type="checkbox"> 2.What tool do we use to interact with the operating system in order to start our vpn connection?(我们用什么工具与操作系统进行交互进而开启我们的vpn连接？)<br>terminal</li><li><input disabled="" type="checkbox"> 3.What service do we use to form our vpn connection?（我们用什么服务形成我们vpn连接？）<br>openvpn</li><li><input disabled="" type="checkbox"> 4.What is the abreviated name for a tunnel interface in the output of your vpn boot-up sequence output?（vpn启动后隧道接口的缩写名称是什么）<br>tun<br>tun就是打开的虚拟网络ifconfig 可以查看到</li><li><input disabled="" type="checkbox"> 5.What tool do we use to test our connection to the target?（我们用什么工具来测试与目标靶机的连接？）<br>ping</li><li><input disabled="" type="checkbox"> 6.What is the name of the tool we use to scan the target’s ports?（我们用什么工具来扫描目标靶机的端口？）<br>nmap</li><li><input disabled="" type="checkbox"> 7.What service do we identify on port 23&#x2F;tcp during our scans?（在我们的扫描结果中tcp23端口被我们认定为是什么服务）<br>telnet</li><li><input disabled="" type="checkbox"> 8.What username ultimately works with the remote management login prompt for the target?（哪个用户名最终可以成功远程登录到目标靶机？）<br>root<h2 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h2></li><li><input disabled="" type="checkbox"> talnet 服务器直接用root用户登陆查看目录下的文件夹即又一个flag文件cat得到flag</li><li><input disabled="" type="checkbox"> b40abdfe23665f766f9c61ecba8a4c19<h1 id="Fawn-2"><a href="#Fawn-2" class="headerlink" title="Fawn(2)"></a>Fawn(2)</h1></li><li>What does the 3-letter acronym FTP stand for?(3 个字母的首字母缩写词 FTP 代表什么) File Transfer Protocol</li><li>What communication model does FTP use, architecturally speaking?(从架构上讲，FTP 使用什么通信模型)  Client-Server Model</li><li>What is the name of one popular GUI FTP program?(一种流行的 GUI FTP 程序的名称是什么) FileZilla</li><li>Which port is the FTP service active on usually?(FTP服务通常在哪个端口上激活)  21&#x2F;tcp</li><li>What acronym is used for the secure version of FTP?(FTP 的安全版本使用什么首字母缩写词？SFTP</li><li>What is the command we can use to test our connection to the target(我们可以使用什么命令来测试我们与目标的连接) ping<h2 id="现在进行目标端口进行扫描"><a href="#现在进行目标端口进行扫描" class="headerlink" title="现在进行目标端口进行扫描"></a>现在进行目标端口进行扫描</h2><h2 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -A #全部等同于scsv0</span><br><span class="line">nmap -sC(script)#执行一些脚本</span><br><span class="line">nmap -sV(service Version)#对开放端口的版本号进行探测</span><br><span class="line">nmap -O(operation system )#对操作系统进行探测</span><br></pre></td></tr></table></figure><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/20220525223959.png"> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(parallels㉿kali-linux-2021-3)-[~]</span><br><span class="line">└─$ nmap -sC -sV 10.129.53.248</span><br><span class="line">Starting Nmap 7.92 ( https://nmap.org ) at 2022-05-25 22:46 CST</span><br><span class="line">Nmap scan report for 10.129.53.248</span><br><span class="line">Host is up (0.67s latency).</span><br><span class="line">Not shown: 999 closed tcp ports (conn-refused)</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">21/tcp open  ftp     vsftpd 3.0.3</span><br><span class="line">| ftp-syst:</span><br><span class="line">|   STAT:</span><br><span class="line">| FTP server status:</span><br><span class="line">|      Connected to ::ffff:10.10.16.166</span><br><span class="line">|      Logged in as ftp</span><br><span class="line">|      TYPE: ASCII</span><br><span class="line">|      No session bandwidth limit</span><br><span class="line">|      Session timeout in seconds is 300</span><br><span class="line">|      Control connection is plain text</span><br><span class="line">|      Data connections will be plain text</span><br><span class="line">|      At session startup, client count was 3</span><br><span class="line">|      vsFTPd 3.0.3 - secure, fast, stable</span><br><span class="line">|_End of status</span><br><span class="line">| ftp-anon: Anonymous FTP login allowed (FTP code 230)</span><br><span class="line">|_-rw-r--r--    1 0        0              32 Jun 04  2021 flag.txt</span><br><span class="line">Service Info: OS: Unix</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 243.76 seconds</span><br></pre></td></tr></table></figure></li><li><input disabled="" type="checkbox"> 在<code>nmap</code>的扫描结果中我们可以看到开放<code>21/tcp</code>端口开放的服务是<code>ftp</code>版本是<code>vsftp 3.0.3</code> 操作系统是<code>unix``ftp</code>服务允许匿名登陆<h2 id="ftp服务进行连接"><a href="#ftp服务进行连接" class="headerlink" title="ftp服务进行连接"></a>ftp服务进行连接</h2></li><li><input disabled="" type="checkbox"> ftp匿名服务Login — anonymous, Password — <a href="mailto:&#97;&#110;&#111;&#110;&#121;&#109;&#x6f;&#117;&#x73;&#64;&#100;&#x6f;&#109;&#97;&#x69;&#x6e;&#46;&#99;&#111;&#x6d;">&#97;&#110;&#111;&#110;&#121;&#109;&#x6f;&#117;&#x73;&#64;&#100;&#x6f;&#109;&#97;&#x69;&#x6e;&#46;&#99;&#111;&#x6d;</a><br><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/20220526151828.png"> </li><li><input disabled="" type="checkbox"> 对flag文件进行下载到本地<br><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/20220526152118.png"> </li><li><input disabled="" type="checkbox"> cat一下就得处flag<h1 id="Dancing"><a href="#Dancing" class="headerlink" title="Dancing"></a>Dancing</h1></li><li>1.What does the 3-letter acronym SMB stand for?（SMB是什么的简称？）<br>Server Message Block</li><li>2.What port does SMB use to operate at?（用什么端口去操作SMB?）<br>445</li><li>3.What network communication model does SMB use, architecturally speaking?（从架构上讲，SMB属于哪种通信模型？）<br>client-server model</li><li>4.What is the service name for port 445 that came up in our nmap scan?（从扫描结果来看，445端口的服务名称是什么？）<br>microsoft-ds</li><li>5.What is the tool we use to connect to SMB shares from our Linux distribution?（在Linux发行版中，我们用什么工具去连接SMB服务的分享？）<br>smbclient</li><li>6.What is the <code>flag</code> or <code>switch</code> we can use with the SMB tool to <code>list</code> the contents of the share?（我们可以用SMB工具哪个“标识”或者“开关”来列举出分享的文件？）<br>-L</li><li>7.What is the name of the share we are able to access in the end?（最终我们可以访问的分享名称是什么？）<br>WorkShares</li><li>8.What is the command we can use within the SMB shell to download the files we find?（在SMB Shell下，我们用什么命令来下载我们找到的文件？）<br>get<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(parallels㉿kali-linux-2021-3)-[~]</span><br><span class="line">└─$ nmap -sC -sV 10.129.37.13                                                                                                 1 ⚙</span><br><span class="line">Starting Nmap 7.92 ( https://nmap.org ) at 2022-05-26 15:47 CST</span><br><span class="line">Nmap scan report for 10.129.37.13</span><br><span class="line">Host is up (0.83s latency).</span><br><span class="line">Not shown: 997 closed tcp ports (conn-refused)</span><br><span class="line">PORT    STATE SERVICE       VERSION</span><br><span class="line">135/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">139/tcp open  netbios-ssn   Microsoft Windows netbios-ssn</span><br><span class="line">445/tcp open  microsoft-ds?</span><br><span class="line">Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">|_clock-skew: 3h59m58s</span><br><span class="line">| smb2-time:</span><br><span class="line">|   date: 2022-05-26T11:51:04</span><br><span class="line">|_  start_date: N/A</span><br><span class="line">| smb2-security-mode:</span><br><span class="line">|   3.1.1:</span><br><span class="line">|_    Message signing enabled but not required</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 238.92 seconds</span><br></pre></td></tr></table></figure></li><li><input disabled="" type="checkbox"> <code>smbclient</code> 查看文件分享命令 </li><li><input disabled="" type="checkbox"> 查看当前当前用户下有什么可分享目录 <code>smbclient -L ip -U username</code><br><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/20220526160814.png"><br><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/20220526160857.png"> </li><li><input disabled="" type="checkbox"> 没设密码不用带<code>-U username</code>进入指定的<code>sharename</code></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> BoxHacker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker的入门使用</title>
      <link href="/2022/05/18/Docker%E7%9A%84%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/05/18/Docker%E7%9A%84%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> tldr:docker</span><br><span class="line"># docker</span><br><span class="line"># Manage Docker containers and images.</span><br><span class="line"># Some subcommands such as `docker run` have their own usage documentation.</span><br><span class="line"># More information: &lt;https://docs.docker.com/engine/reference/commandline/cli/&gt;.</span><br><span class="line"></span><br><span class="line"># List all docker containers (running and stopped):</span><br><span class="line">docker ps --all</span><br><span class="line"></span><br><span class="line"># Start a container from an image, with a custom name:</span><br><span class="line">docker run --name container_name image</span><br><span class="line"></span><br><span class="line"># Start or stop an existing container:</span><br><span class="line">docker start|stop container_name</span><br><span class="line"></span><br><span class="line"># Pull an image from a docker registry:</span><br><span class="line">docker pull image</span><br><span class="line"></span><br><span class="line"># Display the list of already downloaded images:</span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line"># Open a shell inside a running container:</span><br><span class="line">docker exec -it container_name sh</span><br><span class="line"></span><br><span class="line"># Remove a stopped container:</span><br><span class="line">docker rm container_name</span><br><span class="line"></span><br><span class="line"># Fetch and follow the logs of a container:</span><br><span class="line">docker logs -f container_name</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>基本上如上</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull 镜像</span><br><span class="line">docker run -itd --name 容器的名字 镜像的名字 /bin/bash</span><br><span class="line">docker start 容器的名字</span><br><span class="line">docker attach 容器的名字</span><br><span class="line">exit()退出&lt;c+d&gt;也可以</span><br></pre></td></tr></table></figure><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ul><li><p><input disabled="" type="checkbox"> 使用homebrew安装</p></li><li><p>[ ]<code>Homebrew</code> 的 <code>Cask</code> 已经支持 <code>Docker Desktop for Mac</code>，因此可以很方便的使用 Homebrew Cask 来进行安装：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install --cask docker</span><br></pre></td></tr></table></figure><h2 id="手动下载"><a href="#手动下载" class="headerlink" title="手动下载"></a>手动下载</h2></li><li><p><input disabled="" type="checkbox"> 如果需要手动下载，请点击以下 <a href="https://www.docker.com/get-started/">链接</a>选择合适的版本进行下载<br><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/20220518103707.png"> </p><h1 id="打开docker"><a href="#打开docker" class="headerlink" title="打开docker"></a>打开docker</h1><p><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/20220518103830.png"> </p></li><li><p><input disabled="" type="checkbox"> 状态就可以看docker的运行情况<br><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/20220518103905.png"> </p></li><li><p><input disabled="" type="checkbox"> 之后你就可以查看docker版本来检查</p>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker --version</span><br></pre></td></tr></table></figure><h1 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h1></li><li><p><input disabled="" type="checkbox"> DOCKER HUB 上有大量的镜像可以用链接：<a href="https://hub.docker.com/search?q=&amp;type=image">https://hub.docker.com/search?q=&amp;type=image</a></p>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]</span><br></pre></td></tr></table></figure></li><li><p><input disabled="" type="checkbox"> 具体的选项可以通过 docker pull –help 命令看到，这里我们说一下镜像名称的格式。</p></li><li><p><input disabled="" type="checkbox"> Docker 镜像仓库地址：地址的格式一般是 &lt;域名&#x2F;IP&gt;[:端口号]。默认地址是 Docker Hub(docker.io)。</p></li><li><p><input disabled="" type="checkbox"> 仓库名：如之前所说，这里的仓库名是两段式名称，即 &lt;用户名&gt;&#x2F;&lt;软件名&gt;。对于 Docker Hub，如果不给出用户名，则默认为 library，也就是官方镜像。</p>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull ubuntu:18.04</span><br><span class="line">18.04: Pulling from library/ubuntu</span><br><span class="line">92dc2a97ff99: Pull complete</span><br><span class="line">be13a9d27eb8: Pull complete</span><br><span class="line">c8299583700a: Pull complete</span><br><span class="line">Digest: sha256:4bc3ae6596938cb0d9e5ac51a1152ec9dcac2a1c50829c74abd9c4361e321b26</span><br><span class="line">Status: Downloaded newer image for ubuntu:18.04</span><br><span class="line">docker.io/library/ubuntu:18.04</span><br></pre></td></tr></table></figure><p>上面的命令中没有给出 Docker 镜像仓库地址，因此将会从 Docker Hub （docker.io）获取镜像。而镜像名称是 ubuntu:18.04，因此将会获取官方镜像 library&#x2F;ubuntu 仓库中标签为 18.04 的镜像。docker pull 命令的输出结果最后一行给出了镜像的完整名称，即： docker.io&#x2F;library&#x2F;ubuntu:18.04。<br>从下载过程中可以看到我们之前提及的分层存储的概念，镜像是由多层存储所构成。下载也是一层层的去下载，并非单一文件。下载过程中给出了每一层的 ID 的前 12 位。并且下载结束后，给出该镜像完整的 sha256 的摘要，以确保下载一致性。<br>在使用上面命令的时候，你可能会发现，你所看到的层 ID 以及 sha256 的摘要和这里的不一样。这是因为官方镜像是一直在维护的，有任何新的 bug，或者版本更新，都会进行修复再以原来的标签发布，这样可以确保任何使用这个标签的用户可以获得更安全、更稳定的镜像。</p><h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker run -it --rm ubuntu:18.04 bash</span><br><span class="line"></span><br><span class="line">root@e7009c6ce357:/# cat /etc/os-release</span><br><span class="line">NAME=&quot;Ubuntu&quot;</span><br><span class="line">VERSION=&quot;18.04.1 LTS (Bionic Beaver)&quot;</span><br><span class="line">ID=ubuntu</span><br><span class="line">ID_LIKE=debian</span><br><span class="line">PRETTY_NAME=&quot;Ubuntu 18.04.1 LTS&quot;</span><br><span class="line">VERSION_ID=&quot;18.04&quot;</span><br><span class="line">HOME_URL=&quot;https://www.ubuntu.com/&quot;</span><br><span class="line">SUPPORT_URL=&quot;https://help.ubuntu.com/&quot;</span><br><span class="line">BUG_REPORT_URL=&quot;https://bugs.launchpad.net/ubuntu/&quot;</span><br><span class="line">PRIVACY_POLICY_URL=&quot;https://www.ubuntu.com/legal/terms-and-policies/privacy-policy&quot;</span><br><span class="line">VERSION_CODENAME=bionic</span><br><span class="line">UBUNTU_CODENAME=bionic</span><br></pre></td></tr></table></figure></li><li><p><input disabled="" type="checkbox"> docker run 就是运行容器的命令，具体格式我们会在 容器 一节进行详细讲解，我们这里简要的说明一下上面用到的参数。</p></li><li><p><input disabled="" type="checkbox"> -it：这是两个参数，一个是 -i：交互式操作，一个是 -t 终端。我们这里打算进入 bash 执行一些命令并查看返回结果，因此我们需要交互式终端。</p></li><li><p><input disabled="" type="checkbox"> –rm：这个参数是说容器退出后随之将其删除。默认情况下，为了排障需求，退出的容器并不会立即删除，除非手动 docker rm。我们这里只是随便执行个命令，看看结果，不需要排障和保留结果，因此使用 –rm 可以避免浪费空间。</p></li><li><p><input disabled="" type="checkbox"> ubuntu:18.04：这是指用 ubuntu:18.04 镜像为基础来启动容器。</p></li><li><p><input disabled="" type="checkbox"> bash：放在镜像名后的是 命令，这里我们希望有个交互式 Shell，因此用的是 bash。</p></li><li><p><input disabled="" type="checkbox"> 进入容器后，我们可以在 Shell 下操作，执行任何所需的命令。这里，我们执行了 cat &#x2F;etc&#x2F;os-release，这是 Linux 常用的查看当前系统版本的命令，从返回的结果可以看到容器内是 Ubuntu 18.04.1 LTS 系统。</p></li><li><p><input disabled="" type="checkbox"> 最后我们通过 exit 退出了这个容器。</p><h1 id="列出镜像列表"><a href="#列出镜像列表" class="headerlink" title="列出镜像列表"></a>列出镜像列表</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker image ls</span><br><span class="line">REPOSITORY           TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">redis                latest              5f515359c7f8        5 days ago          183 MB</span><br><span class="line">nginx                latest              05a60462f8ba        5 days ago          181 MB</span><br><span class="line">mongo                3.2                 fe9198c04d62        5 days ago          342 MB</span><br><span class="line">&lt;none&gt;               &lt;none&gt;              00285df0df87        5 days ago          342 MB</span><br><span class="line">ubuntu               18.04               329ed837d508        3 days ago          63.3MB</span><br><span class="line">ubuntu               bionic              329ed837d508        3 days ago          63.3MB</span><br></pre></td></tr></table></figure><p>列表包含了 仓库名、标签、镜像 ID、创建时间 以及 所占用的空间。<br>其中仓库名、标签在之前的基础概念章节已经介绍过了。镜像 ID 则是镜像的唯一标识，一个镜像可以对应多个 标签.</p><h1 id="镜像体积"><a href="#镜像体积" class="headerlink" title="镜像体积"></a>镜像体积</h1><p>如果仔细观察，会注意到，这里标识的所占用空间和在 Docker Hub 上看到的镜像大小不同。比如，ubuntu:18.04 镜像大小，在这里是 63.3MB，但是在 Docker Hub 显示的却是 25.47 MB。这是因为 Docker Hub 中显示的体积是压缩后的体积。在镜像下载和上传过程中镜像是保持着压缩状态的，因此 Docker Hub 所显示的大小是网络传输中更关心的流量大小。而 docker image ls 显示的是镜像下载到本地后，展开的大小，准确说，是展开后的各层所占空间的总和，因为镜像到本地后，查看空间的时候，更关心的是本地磁盘空间占用的大小。<br>另外一个需要注意的问题是，docker image ls 列表中的镜像体积总和并非是所有镜像实际硬盘消耗。由于 Docker 镜像是多层存储结构，并且可以继承、复用，因此不同镜像可能会因为使用相同的基础镜像，从而拥有共同的层。由于 Docker 使用 Union FS，相同的层只需要保存一份即可，因此实际镜像硬盘占用空间很可能要比这个列表镜像大小的总和要小的多。<br>你可以通过 docker system df 命令来便捷的查看镜像、容器、数据卷所占用的空间。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker system df</span><br><span class="line"></span><br><span class="line">TYPE                TOTAL               ACTIVE              SIZE                RECLAIMABLE</span><br><span class="line">Images              24                  0                   1.992GB             1.992GB (100%)</span><br><span class="line">Containers          1                   0                   62.82MB             62.82MB (100%)</span><br><span class="line">Local Volumes       9                   0                   652.2MB             652.2MB (100%)</span><br><span class="line">Build Cache                                                 0B                  0B</span><br></pre></td></tr></table></figure><h2 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker image rm [选项] &lt;镜像1&gt; [&lt;镜像2&gt; ...]</span><br></pre></td></tr></table></figure></li><li><p><input disabled="" type="checkbox"> 其中，&lt;镜像&gt; 可以是 镜像短 ID、镜像长 ID、镜像名 或者 镜像摘要。</p>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker image ls</span><br><span class="line">REPOSITORY                  TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">centos                      latest              0584b3d2cf6d        3 weeks ago         196.5 MB</span><br><span class="line">redis                       alpine              501ad78535f0        3 weeks ago         21.03 MB</span><br><span class="line">docker                      latest              cf693ec9b5c7        3 weeks ago         105.1 MB</span><br><span class="line">nginx                       latest              e43d811ce2f4        5 weeks ago         181.5 MB</span><br></pre></td></tr></table></figure>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker image rm 501</span><br><span class="line">Untagged: redis:alpine</span><br><span class="line">Untagged: redis@sha256:f1ed3708f538b537eb9c2a7dd50dc90a706f7debd7e1196c9264edeea521a86d</span><br><span class="line">Deleted: sha256:501ad78535f015d88872e13fa87a828425117e3d28075d0c117932b05bf189b7</span><br><span class="line">Deleted: sha256:96167737e29ca8e9d74982ef2a0dda76ed7b430da55e321c071f0dbff8c2899b</span><br><span class="line">Deleted: sha256:32770d1dcf835f192cafd6b9263b7b597a1778a403a109e2cc2ee866f74adf23</span><br><span class="line">Deleted: sha256:127227698ad74a5846ff5153475e03439d96d4b1c7f2a449c7a826ef74a2d2fa</span><br><span class="line">Deleted: sha256:1333ecc582459bac54e1437335c0816bc17634e131ea0cc48daa27d32c75eab3</span><br><span class="line">Deleted: sha256:4fc455b921edf9c4aea207c51ab39b10b06540c8b4825ba57b3feed1668fa7c7</span><br></pre></td></tr></table></figure><h1 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h1></li><li><p><input disabled="" type="checkbox"> 如下图完整的演示了我如何打开容器<br><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/20220518105952.png"> </p><h2 id="导出和导入"><a href="#导出和导入" class="headerlink" title="导出和导入"></a>导出和导入</h2></li><li><p><input disabled="" type="checkbox"> 如果要导出本地某个容器，可以使用 docker export 命令。</p>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker container ls -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                    PORTS               NAMES</span><br><span class="line">7691a814370e        ubuntu:18.04        &quot;/bin/bash&quot;         36 hours ago        Exited (0) 21 hours ago                       test</span><br><span class="line">$ docker export 7691a814370e &gt; ubuntu.tar</span><br></pre></td></tr></table></figure><ul><li><input disabled="" type="checkbox"> 这样将导出容器快照到本地文件。</li><li><input disabled="" type="checkbox"> 可以使用 docker import 从容器快照文件中再导入为镜像，例如  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cat ubuntu.tar | docker import - test/ubuntu:v1.0</span><br><span class="line">$ docker image ls</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED              VIRTUAL SIZE</span><br><span class="line">test/ubuntu         v1.0                9d37a6082e97        About a minute ago   171.3 MB</span><br></pre></td></tr></table></figure><h2 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker container rm trusting_newton</span><br><span class="line">trusting_newton</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黑客专属谷歌浏览器</title>
      <link href="/2022/05/17/%E9%BB%91%E5%AE%A2%E4%B8%93%E5%B1%9E%E8%B0%B7%E6%AD%8C%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
      <url>/2022/05/17/%E9%BB%91%E5%AE%A2%E4%B8%93%E5%B1%9E%E8%B0%B7%E6%AD%8C%E6%B5%8F%E8%A7%88%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="VImium"><a href="#VImium" class="headerlink" title="VImium"></a>VImium</h1><ul><li><input disabled="" type="checkbox"> 犹豫浏览器的使用比较频繁我所以还是需要提高点效率</li><li><input disabled="" type="checkbox"> 第二，有时候坐的地方桌子小，放个电脑刚刚好，鼠标就只能放在大腿上了，我就浏览个网页，逛个知乎，触摸板可能也就够用了，但感觉还是不够灵活。</li><li><input disabled="" type="checkbox"> github的原地址<a href="https://github.com/philc/vimium">链接</a><h2 id="功能（一）浏览页面"><a href="#功能（一）浏览页面" class="headerlink" title="功能（一）浏览页面"></a>功能（一）浏览页面</h2></li><li><input disabled="" type="checkbox"> 向上滚动→j&#x2F;d</li><li><input disabled="" type="checkbox"> 向下滚动→k&#x2F;u</li><li><input disabled="" type="checkbox"> 跳到页面顶端→gg</li><li><input disabled="" type="checkbox"> 跳到页面底部→G</li><li><input disabled="" type="checkbox"> 刷新页面→r</li><li><input disabled="" type="checkbox"> 复制当前网页网址→yy</li><li><input disabled="" type="checkbox"> 聚焦到第一个输入框→gi</li><li><input disabled="" type="checkbox"> 在当前页面打开链接→f</li><li><input disabled="" type="checkbox"> 移动当前的标签页到新的窗口→W<h2 id="功能（二）使用-Vomnibar"><a href="#功能（二）使用-Vomnibar" class="headerlink" title="功能（二）使用 Vomnibar"></a>功能（二）使用 Vomnibar</h2></li><li><input disabled="" type="checkbox"> 打开 URL、书签、历史记录→o&#x2F;O O大写的O比较常用因为是在新标签页打开</li><li><input disabled="" type="checkbox"> 搜索与打开书签→b&#x2F;B 大写同理</li><li><input disabled="" type="checkbox"> 搜索你打开的标签→T</li><li><input disabled="" type="checkbox"> 一般来说O能满足你80%的需求</li><li>标签页的切换可以根据J&#x2F;K来切换多的时候也可以根据T来切换<h2 id="功能（三）访问页面历史"><a href="#功能（三）访问页面历史" class="headerlink" title="功能（三）访问页面历史"></a>功能（三）访问页面历史</h2></li><li><input disabled="" type="checkbox"> 返回到之前的页面→H</li><li><input disabled="" type="checkbox"> 前进到之后的页面→L<h2 id="功能（四）控制标签"><a href="#功能（四）控制标签" class="headerlink" title="功能（四）控制标签"></a>功能（四）控制标签</h2></li><li><input disabled="" type="checkbox"> 创建标签→t</li><li><input disabled="" type="checkbox"> 跳到左边的标签页→J</li><li><input disabled="" type="checkbox"> 跳到右边的标签页→K</li><li><input disabled="" type="checkbox"> 关闭当前的页面→x</li><li><input disabled="" type="checkbox"> 恢复关闭的页面→X</li><li><input disabled="" type="checkbox"> 跳到第一个标签页→g0</li><li><input disabled="" type="checkbox"> 跳到最后一个标签页→g$</li><li><input disabled="" type="checkbox"> 复制当前标签页→yt</li><li><input disabled="" type="checkbox"> 查看帮助 shift+?<h2 id="功能（五-标记"><a href="#功能（五-标记" class="headerlink" title="功能（五)标记"></a>功能（五)标记</h2></li><li><input disabled="" type="checkbox"> 全局标记和局部标记→ma,mA</li><li><input disabled="" type="checkbox"> ‘a,’A<h2 id="其他高级功能"><a href="#其他高级功能" class="headerlink" title="其他高级功能"></a>其他高级功能</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">]], [[  Follow the link labeled &#x27;next&#x27; or &#x27;&gt;&#x27; (&#x27;previous&#x27; or &#x27;&lt;&#x27;)</span><br><span class="line">          - helpful for browsing paginated sites</span><br><span class="line">&lt;a-f&gt;   open multiple links in a new tab</span><br><span class="line">gi      focus the first (or n-th) text input box on the page. Use &lt;tab&gt; to cycle through options.</span><br><span class="line">gu      go up one level in the URL hierarchy</span><br><span class="line">gU      go up to root of the URL hierarchy</span><br><span class="line">ge      edit the current URL</span><br><span class="line">gE      edit the current URL and open in a new tab</span><br><span class="line">zH      scroll all the way left</span><br><span class="line">zL      scroll all the way right</span><br><span class="line">v       enter visual mode; use p/P to paste-and-go, use y to yank</span><br><span class="line">V       enter visual line mode</span><br></pre></td></tr></table></figure><h2 id="需要注意的是不是所以页面都支持vim的你需要看插件的颜色如果是灰色的就不能够用"><a href="#需要注意的是不是所以页面都支持vim的你需要看插件的颜色如果是灰色的就不能够用" class="headerlink" title="需要注意的是不是所以页面都支持vim的你需要看插件的颜色如果是灰色的就不能够用"></a>需要注意的是不是所以页面都支持vim的你需要看插件的颜色如果是灰色的就不能够用</h2></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> vim </tag>
            
            <tag> 效率 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macbook效率工具的使用</title>
      <link href="/2022/05/14/macbook%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/05/14/macbook%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="文件管理器nnn"><a href="#文件管理器nnn" class="headerlink" title="文件管理器nnn"></a>文件管理器nnn</h2><p><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/20220516121027.png"> </p><h2 id="background工具的使用"><a href="#background工具的使用" class="headerlink" title="background工具的使用"></a>background工具的使用</h2><ul><li>background工具是一款mac上的动态壁纸工具除了动态壁纸还有很多其他功能</li><li>缺点就是backgroud的动态壁纸需要自己找并且需要存放在本地往往这需要一定的储存空间<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3></li><li><input disabled="" type="checkbox"> app store的下载</li><li><input disabled="" type="checkbox"> macwk网的<a href="https://www.macwk.com/">下载</a>mac的很多软件都可以从这下载</li><li>接下来下载使用即可<div style="border:2px solid #fff;color:blue; text-align:center" class="box">这解决了之前用window打游戏wallpaper转macbook却没有动态壁纸的问题</div></li></ul><h3 id="静态壁纸推荐pa-per这里的静态壁纸质量比较高如果你有大量需求也可以通过抓取app的请求来进行爬取图片"><a href="#静态壁纸推荐pa-per这里的静态壁纸质量比较高如果你有大量需求也可以通过抓取app的请求来进行爬取图片" class="headerlink" title="静态壁纸推荐pa.per这里的静态壁纸质量比较高如果你有大量需求也可以通过抓取app的请求来进行爬取图片"></a>静态壁纸推荐pa.per这里的静态壁纸质量比较高如果你有大量需求也可以通过抓取app的请求来进行爬取图片</h3><h2 id="alttab工具的使用"><a href="#alttab工具的使用" class="headerlink" title="alttab工具的使用"></a>alttab工具的使用</h2><ul><li><input disabled="" type="checkbox"> 开始使用macbook往往会不习惯mac自带的窗口切换因为他不会把你最小化的窗口跳出来往往你需要点击才能出现</li><li><input disabled="" type="checkbox"> <code>alttab</code>这个软件就提供了跟window类似的窗口跳转可以把你隐藏的或者最小化的窗口跳出来你也可以设置一些设置对窗口的一些自定义<h2 id="rectangle工具的使用"><a href="#rectangle工具的使用" class="headerlink" title="rectangle工具的使用"></a>rectangle工具的使用</h2></li><li><input disabled="" type="checkbox"> 当你看到arch系统的窗口运用的如此流利时不禁留下了眼泪</li><li><input disabled="" type="checkbox"> rectangle就是一个窗口管理你可以自己设置快捷键来进行设置我需求不多只设置了2&#x2F;1 和4&#x2F;1的快捷键根据个人需求我常用vim所以我设置的是cotrol+shift+vim的上下左右等等<h2 id="cheatsheet的使用"><a href="#cheatsheet的使用" class="headerlink" title="cheatsheet的使用"></a>cheatsheet的使用</h2></li><li><input disabled="" type="checkbox"> command长按可以查看快捷键</li><li><h2 id="paste工具的使用"><a href="#paste工具的使用" class="headerlink" title="paste工具的使用"></a>paste工具的使用</h2></li><li><input disabled="" type="checkbox"> 他能把你的剪贴版历史变成图形化界面<br><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/20220523151130.png"> </li><li><input disabled="" type="checkbox"> 可以把你一些常用的地址啊格式啊放在自己设置的标签页上<h2 id="snipaste工具的使用"><a href="#snipaste工具的使用" class="headerlink" title="snipaste工具的使用"></a>snipaste工具的使用</h2><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/20220523151313.png"> </li><li><input disabled="" type="checkbox"> 截屏功能比自带的截屏功能更加的完善</li><li><input disabled="" type="checkbox"> 支持贴图功能能够把你截屏的内容贴在屏幕上</li><li><input disabled="" type="checkbox"> 安装基本上macwk上都可以安装破解版</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> macbook </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac从入门到痴迷之iterm2和oh-my-zsh</title>
      <link href="/2022/05/11/mac%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%97%B4%E8%BF%B7%E4%B9%8Biterm2%E5%92%8Coh-my-zsh/"/>
      <url>/2022/05/11/mac%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%97%B4%E8%BF%B7%E4%B9%8Biterm2%E5%92%8Coh-my-zsh/</url>
      
        <content type="html"><![CDATA[<h1 id="iterm2的安装"><a href="#iterm2的安装" class="headerlink" title="iterm2的安装"></a>iterm2的安装</h1><ul><li><p><input disabled="" type="checkbox"> <a href="https://iterm2.com/">https://iterm2.com/</a></p></li><li><p><input disabled="" type="checkbox"> Term2 是一款完全免费的，专为 Mac OS 用户打造的命令行应用。直接在官网上下载。<br>下载的是压缩文件，解压后是执行程序文件，你可以直接双击，或者直接将它拖到 Applications 目录下。<br>或者你可以直接使用 Homebrew 进行安装：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install --cask iterm2</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2></li><li><p><input disabled="" type="checkbox"> 设置为默认终端<br><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/20220518094956.png"> </p></li><li><p><input disabled="" type="checkbox"> 设置主题和字体<br><code>command</code>+<code>,</code>打开<code>preference</code>在color中设置color presets<br><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/20220518095102.png"><br><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/20220518095122.png"> </p><h3 id="光标控制"><a href="#光标控制" class="headerlink" title="光标控制"></a>光标控制</h3></li><li><p>ctrl + a: 到行首</p></li><li><p>ctrl + e: 行末</p></li><li><p>ctrl + f&#x2F;b: 前进后退，相当于左右方向键，但是显然比移开手按方向键更快</p></li><li><p>ctrl + p: 上一条命令，相当于方向键上</p></li><li><p>ctrl + r: 搜索命令历史，这个大家都应该很熟悉了</p></li><li><p>ctrl + d: 删除当前字符</p></li><li><p>ctrl + h: 删除之前的字符</p></li><li><p>ctrl + w: 删除光标前的单词</p></li><li><p>ctrl + k: 删除到文本末尾</p></li><li><p>ctrl + t: 交换光标处文本</p></li><li><p>⌘ + —&#x2F;+&#x2F;0: 调整字体大小</p></li><li><p>⌘ + r:清屏，其实是滚到新的一屏，并没有清空。ctrl + l 也可以做到。</p></li></ul><h3 id="窗口操作"><a href="#窗口操作" class="headerlink" title="窗口操作"></a>窗口操作</h3><ul><li>新建窗口：shift + command + d（横向）command + d（竖向）</li><li>关闭窗口：shift + command + w</li><li>前一个窗口：command + &#96;</li><li>后一个窗口：command + ~</li><li>进入窗口 1,2,3：option + command + 编号</li></ul><h3 id="标签页操作"><a href="#标签页操作" class="headerlink" title="标签页操作"></a>标签页操作</h3><ul><li>新建标签页: Command + T</li><li>关闭标签页: Command + W</li><li>前一个标签页: Command + 左方向键，Shift + Command + [</li><li>后一个标签页: Command + 右方向键，Shitf + Command + ]</li><li>进入标签页1，2，3…: Command + 标签页编号<br> *Expose 标签页: Option + Command + E（将标签页打撒到全屏，并可以全局搜索所有的标签页）</li></ul><h3 id="面板操作"><a href="#面板操作" class="headerlink" title="面板操作"></a>面板操作</h3><p>垂直分割: Command + D</p><ul><li>水平分割: Shift + Command + D</li><li>前一个面板: Command + [</li><li>后一个面板: Command + ]</li><li>切换到上&#x2F;下&#x2F;左&#x2F;右面板: Option + Command + 上下左右方向键</li></ul><h3 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h3><ul><li>支持自定义全局快捷键用于显示和隐藏iTerm2 Preference -&gt; Keys －&gt; Show&#x2F;hide iTerm2 with a system-wide hotkey 打上勾之后</li><li>进入和退出全屏: Command + Enter</li><li>查看当前终端中光标的位置: Command + &#x2F;</li><li>命令自动补全: Command + ;（很少用这个，还是感觉Zsh的补全更好用）</li><li>开启和关闭背景半透明: Command + u</li><li>清屏（重置当前终端）: Command + r</li></ul><h3 id="位置书签"><a href="#位置书签" class="headerlink" title="位置书签"></a>位置书签</h3><p>在当前会话中按Command + Shift + m可以保存当前位置，之后可以按Command + Shift + j跳回这个位置。</p><h3 id="粘贴历史"><a href="#粘贴历史" class="headerlink" title="粘贴历史"></a>粘贴历史</h3><p>使用Command + Shift + h 可以呼出粘贴历史，支持模糊检索。还可以设置将粘贴历史保存在磁盘上（Preferences -&gt; General）</p><h3 id="即时回放"><a href="#即时回放" class="headerlink" title="即时回放"></a>即时回放</h3><p>使用Command + Opt + b 打开即时回放，按Esc退出。即时回放可以记录终端输出的状态，让你“穿越时间”查看终端内容。默认每个会话最多储存4MB的内容，可以在设置中更改（Preferences -&gt; Genernal -&gt; Instant Replay）。</p><h1 id="oh-myzsh"><a href="#oh-myzsh" class="headerlink" title="oh-myzsh"></a>oh-myzsh</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">❯ cat /etc/shells</span><br><span class="line"># List of acceptable shells for chpass(1).</span><br><span class="line"># Ftpd will not allow users to connect who are not using</span><br><span class="line"># one of these shells.</span><br><span class="line">/bin/bash</span><br><span class="line">/bin/csh</span><br><span class="line">/bin/dash</span><br><span class="line">/bin/ksh</span><br><span class="line">/bin/sh</span><br><span class="line">/bin/tcsh</span><br><span class="line">/bin/zsh</span><br></pre></td></tr></table></figure><ul><li><input disabled="" type="checkbox"> bash是mac中terminal自带的shell，把它换成zsh，这个的功能要多得多。拥有语法高亮，命令行tab补全，自动提示符，显示Git仓库状态等功能。</li><li><input disabled="" type="checkbox"> 使用下面命令设置默认shell，bash和zsh切换<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 切换到bash</span><br><span class="line">chsh -s /bin/bash</span><br><span class="line"># 切换到zsh</span><br><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure></li><li><input disabled="" type="checkbox"> 记得输入切换命令后，要重新打开终端才能生效</li><li><input disabled="" type="checkbox"> 在 macOS 中，已经自带了 <code>/bin/zsh</code>，但是它未必是最新版本。</li><li><input disabled="" type="checkbox"> 可以通过执行 <code>echo $SHELL</code> 查看 当前所使用的是哪个版本的shells，（所有shells 可在&#x2F;etc&#x2F;shells 中查看 ）<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install zsh zsh-completions</span><br></pre></td></tr></table></figure></li><li><input disabled="" type="checkbox"> 由于是用brew安装，所以新版 zsh 文件是在 &#x2F;usr&#x2F;local&#x2F;bin&#x2F;zsh</li><li><input disabled="" type="checkbox"> github地址:<a href="https://github.com/ohmyzsh/ohmyzsh">https://github.com/ohmyzsh/ohmyzsh</a></li><li>使用 <code>curl</code> 安装：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure></li><li>使用 wget 安装：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh -c &quot;$(wget -O- https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure><h2 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h2></li><li><input disabled="" type="checkbox"> github主题使用地址:<a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes">https://github.com/ohmyzsh/ohmyzsh/wiki/Themes</a></li><li><input disabled="" type="checkbox"> 主题列表地址:<a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/themes">https://github.com/ohmyzsh/ohmyzsh/tree/master/themes</a></li><li><input disabled="" type="checkbox"> 你的配置都在home目录下的.zhrc文件中用vim打开修改即可<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ZSH_THEME=&quot;agnoster&quot;</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="修改如上即可agnoster是主题的名字你也可以修改成你自己喜欢的主题"><a href="#修改如上即可agnoster是主题的名字你也可以修改成你自己喜欢的主题" class="headerlink" title="修改如上即可agnoster是主题的名字你也可以修改成你自己喜欢的主题 "></a>修改如上即可agnoster是主题的名字你也可以修改成你自己喜欢的主题 </h2><h2 id="POWERLINE字体的下载安装"><a href="#POWERLINE字体的下载安装" class="headerlink" title="POWERLINE字体的下载安装"></a>POWERLINE字体的下载安装</h2><p>Powerline下载：<a href="https://github.com/powerline/fonts">https://github.com/powerline/fonts</a><br>iTerm2 改为主题之后，会出现乱码的情况。需要安装 Powerline 字体来解决。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># clone 先克隆</span><br><span class="line">git clone https://github.com/powerline/fonts.git</span><br><span class="line"># install 后安装</span><br><span class="line">cd fonts</span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure><p>可以按照以上命令进行 powerline 全部字体安装，也可以选择部份字体安装；<br>而我选择 <code>Meslo</code> 一个字体安装<br>下载 <code>Meslo</code> 字体下载<br>双击字体，安装到 Mac OS 系统字体册<br>安装完字体库之后，打开 <code>iTerm2</code>，按 <code>Command + ,</code> 键，打开 <code>Preferences</code> 配置界面，然后 <code>Profiles -&gt; Text -&gt; Font -&gt; Chanage Font</code> ，选择 <code>Meslo LG M Regular for Powerline</code> 字体。</p><ul><li><input disabled="" type="checkbox"> 类似MESLO的字体就行不用限制于字体名字<h2 id="on-my-zhs-下载高亮安装方法"><a href="#on-my-zhs-下载高亮安装方法" class="headerlink" title="on-my-zhs 下载高亮安装方法"></a>on-my-zhs 下载高亮安装方法</h2></li><li><input disabled="" type="checkbox"> 使用homebrew安装<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install zsh-syntax-highlighting</span><br></pre></td></tr></table></figure></li><li><input disabled="" type="checkbox"> 有两种方式能让插件生效即source插件zsh文件或者如下图在plugins中添加需要注意的是语法问题<br><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/20220518101428.png"> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source ~/.oh-my-zsh/custom/plugins/zsh-autoswitch-virtualenv/autoswitch_virtualenv.plugin.zsh</span><br></pre></td></tr></table></figure></li><li><input disabled="" type="checkbox"> github插件使用地址:<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins">https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins</a></li><li><input disabled="" type="checkbox"> 使用方式如上图</li></ul><hr><h2 id="你在终端配置文件中还可以设置很多自己的东西比如下图中我的"><a href="#你在终端配置文件中还可以设置很多自己的东西比如下图中我的" class="headerlink" title="你在终端配置文件中还可以设置很多自己的东西比如下图中我的"></a>你在终端配置文件中还可以设置很多自己的东西比如下图中我的</h2><p><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/20220518101655.png"> </p>]]></content>
      
      
      
        <tags>
            
            <tag> macos </tag>
            
            <tag> iterm2 </tag>
            
            <tag> on-my-zsh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无线网络基于macos的学习</title>
      <link href="/2022/05/11/%E6%97%A0%E7%BA%BF%E7%BD%91%E7%BB%9C%E5%9F%BA%E4%BA%8Emacbook%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/05/11/%E6%97%A0%E7%BA%BF%E7%BD%91%E7%BB%9C%E5%9F%BA%E4%BA%8Emacbook%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="无线网络笔记汇总"><a href="#无线网络笔记汇总" class="headerlink" title="无线网络笔记汇总"></a>无线网络笔记汇总</h1><hr><ul><li>一些自己学习的东西</li></ul><hr><ul><li><p><input disabled="" type="checkbox"> 苹果的用户会有个MDNS管理我猜测这应该是投屏或者icloud实现的一种功能性,在局域网中实现所以在混杂模式下我的wireshark抓到很多连上学校网络的MDNS上面包括了苹果用户的host和sourceIP ip地址<br>a个进入局域网的主机，如果开启了mDNS服务的话，都会向局域网内的所有主机组播一个消息，我是谁，和我的IP地址是多少。然后其他也有该服务的主机就会响应，也会告诉你，它是谁，它的IP地址是多少。mDNS的域名与普通DNS的域名是通过后缀.local区分开来的。如果一台终端需要访问一个mDNS域名，他就会向局域网内发送组播，询问该域名的IP是多少。<br>MDNS<a href="https://xz.aliyun.com/t/9171">https://xz.aliyun.com/t/9171</a>  这个网站写的很详细mac的MDNS伪造等等</p></li><li><p><input disabled="" type="checkbox"> 还有就是rarp协议(反向地址解析协议)反向地址解析协议 (RARP) 是局域网 (LAN) 中的物理机可以用来请求其 IP 地址的协议。它通过将设备的物理地址发送到位于同一 LAN 上并主动侦听 RARP 请求的专用 RARP 服务器来实现此目的。</p></li></ul><h1 id="802-11-帧格式和分类"><a href="#802-11-帧格式和分类" class="headerlink" title=" 802.11 帧格式和分类"></a><a href="https://www.cnblogs.com/rougungun/p/14340489.html" class="link"> 802.11 </a>帧格式和分类</h1><ul><li>数据帧  type&#x3D;10</li><li>控制帧  type&#x3D;01</li><li>管理帧  type&#x3D;00<br><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/wifi_00.png" alt="pic_!"> <h2 id="管理帧"><a href="#管理帧" class="headerlink" title="管理帧"></a>管理帧</h2></li></ul><p>它的主要作用是维护接入点和无线客户端之间的通信，管理帧框架拥有一下类型:</p><ul><li>Authentication Request&#x2F;Response(用于认证操作)</li><li>DeAuthentication(用于去掉认帧)</li><li>Association Request</li><li>Association Response</li><li>Reassociation Request</li><li>Reassociation Response</li><li>Disassocation</li><li>Beacon(AP发出用于通过被动扫描发现AP)</li><li>probe Request(用于主动扫描发现AP)</li><li>Probe Response(用于主动扫描发现AP)<br><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/wifi_01.png" alt="pic_01"> <h2 id="控制帧"><a href="#控制帧" class="headerlink" title="控制帧"></a>控制帧</h2></li></ul><p>控制帧是负责客户端和接入点的数据交换，类型为：</p><ul><li>Requeset to Send(RTS)</li><li>Clear to Send(CTS)</li><li>Acknowledgenment(ACK)<br><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/wifi_02.png" alt="pic_02"></li></ul><h2 id="数据帧"><a href="#数据帧" class="headerlink" title="数据帧"></a>数据帧</h2><p>携带传输的数据的帧，类型主要有：</p><ul><li>DHCP</li><li>TCP</li><li>Http</li><li>EAPOL-key</li><li>802.11 Flag<br><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/wifi_03.png" alt="pic_03"> <h1 id="wireshark的基本使用"><a href="#wireshark的基本使用" class="headerlink" title="wireshark的基本使用"></a>wireshark的基本使用</h1>过滤表达式的语法<br><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/wifi_04.png" alt="pic_04"></li></ul><hr><ul><li>HTTP协议数据包过滤举例</li></ul><hr><p><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/wifi_05.png" alt="pic_05"> </p><ul><li><code>TCP</code>和<code>UDP</code>协议数据包过滤举例</li></ul><p><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/wifi_06.png" alt="pic_06"> </p><ul><li>一些例子</li></ul><p><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/wifi_07.png" alt="pic_07"><br><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/wifi_08.png" alt="pic_08"> </p><h1 id="airport命令"><a href="#airport命令" class="headerlink" title="airport命令"></a><code>airport</code>命令</h1><p>查询命令即可知道 </p><ul><li><input disabled="" type="checkbox"> curl cheat.sh&#x2F;airport</li><li><input disabled="" type="checkbox"> <code>aiprot sniff(嗅探) 1(信道)</code> 打开监听模式</li><li>如果要在苹果电脑上进行嗅探模式我建议用苹果自带的嗅探工具更为方便唯一的缺点就是不能用实时的抓取数据  </li><li>如果要实时抓取数据可以在打开嗅探模式后再打开<code>wirshark</code>打开监听模式就能实时抓取到<code>wifi</code>数据包<br><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/20220511101720.png" alt="aa"><br><kbd class="keybord"> option </kbd> + <kbd class="keybord"> click </kbd> + <kbd class="keybord"> wifi </kbd> + <kbd class="keybord"> 窗体 </kbd> + <kbd class="keybord"> 嗅探器 </kbd>&amp;ensp;<br>打开嗅探器可以选择信道和频率一般情况下它会自动选择连接对应<code>wifi</code>的信道和频率</li><li>如果不知道此wifi在哪个信道扫描工具可以显示wifi的具体信息</li></ul><hr><ul><li><input disabled="" type="checkbox"> sudo airport -s #查看所有可以被发现的wifi功能跟无线诊断的扫描功能类似<br><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/20220511102649.png" alt="pic_011"> </li><li><input disabled="" type="checkbox"> 注意！执行wifi一些操作时常常需要sudo可能因为苹果的安全设计<br><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/20220511101438.png"> </li><li><input disabled="" type="checkbox"> airport -I </li><li>查看当前无线状态信息</li><li><input disabled="" type="checkbox"> wpa破解密码比较困难</li><li><input disabled="" type="checkbox"> wep较为简单<h2 id="aircrack-ng可以实现对wiif握手包的抓取和字典破解功能"><a href="#aircrack-ng可以实现对wiif握手包的抓取和字典破解功能" class="headerlink" title="aircrack-ng可以实现对wiif握手包的抓取和字典破解功能"></a><a href="https://www.cnblogs.com/halberd-lee/p/11400347.html">aircrack-ng可以实现对wiif握手包的抓取和字典破解功能</a></h2><h2 id="wpa的破解"><a href="#wpa的破解" class="headerlink" title="wpa的破解"></a><code>wpa</code>的破解</h2><h3 id="对无线网络进行扫描"><a href="#对无线网络进行扫描" class="headerlink" title="对无线网络进行扫描"></a>对无线网络进行扫描</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo airport -s</span><br></pre></td></tr></table></figure><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/20220523220041.png">  <h3 id="监听目标wifi的信道"><a href="#监听目标wifi的信道" class="headerlink" title="监听目标wifi的信道"></a>监听目标<code>wifi</code>的信道</h3></li><li><input disabled="" type="checkbox"> 观察目标wifi的信道对目标wifi的信道进行监听<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo airport sniff 6</span><br><span class="line">这个假定他是6信道</span><br></pre></td></tr></table></figure></li><li><input disabled="" type="checkbox"> 抓取的数据会在<code>/tmp/*.cap</code>中<h3 id="利用字典暴力破解"><a href="#利用字典暴力破解" class="headerlink" title="利用字典暴力破解"></a>利用字典暴力破解</h3></li><li><input disabled="" type="checkbox"> 这种方式比较无脑破解的记率其实比较小</li><li><input disabled="" type="checkbox"> 破解还需要的另外一个很重要的东西就是 “密码字典”。网上有很多的密码字典，密码字典就是各种人们常用到的密码的小片段，比如名字、生日之类的，因为很少有人采用完全没有规律的数字、字母作为密码，他&#x2F;她自己也记不住。密码字典能够极大的加快破解速度。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aircrack-ng -w dict.txt *cap</span><br></pre></td></tr></table></figure></li><li><input disabled="" type="checkbox"> 常用的一些破解字典<code>github</code>上有很多<h1 id="hydra"><a href="#hydra" class="headerlink" title="hydra"></a>hydra</h1></li><li>字典破解工具也可以用<code>hydra</code> 他的用途就很光了可以破解更重 <a href="https://blog.csdn.net/weixin_44847002/article/details/106627562">hydra</a></li></ul><h2 id="生成字典工具"><a href="#生成字典工具" class="headerlink" title="生成字典工具"></a>生成字典工具</h2><h1 id="wep的破解"><a href="#wep的破解" class="headerlink" title="wep的破解"></a>wep的破解</h1><ul><li><input disabled="" type="checkbox"> “WEP是Wired Equivalent Privacy的简称，有线等效保密（WEP）协议是对在两台设备间无线传输的数据进行加密的方式，用以防止非法用户窃听或侵入无线网络。不过密码分析学家已经找出 WEP 好几个弱点，因此在2003年被 Wi-Fi Protected Access (WPA) 淘汰，又在2004年由完整的 IEEE 802.11i 标准（又称为 WPA2）所取代</li><li><input disabled="" type="checkbox"> 1.初始化向量IV长度24位，导致密钥的长度太短；</li><li><input disabled="" type="checkbox"> 2.虚拟随机数产生器里，使用 RC4 算法产生密钥序列，RC4算法同一个钥匙绝不能使用二次，而24位IV无法保证；</li><li><input disabled="" type="checkbox"> 3.明文通过 CRC 校验生成完整性校验码，而不是采用密码学方法；</li><li><input disabled="" type="checkbox"> 4.4 个密钥需要手动更新而不是自动轮换；</li><li><input disabled="" type="checkbox"> 5.客户端在不提供正确网络接入口令的情况下，依然可以通过认证并连接；</li><li><input disabled="" type="checkbox"> 前提条件是wep需要抓取到足够的数据包并且然后用<code>aircrack-ng</code>对抓取的数据包进行破解即可<h2 id="使用cowpatty进行密码破解"><a href="#使用cowpatty进行密码破解" class="headerlink" title="使用cowpatty进行密码破解"></a>使用cowpatty进行密码破解</h2></li><li><input disabled="" type="checkbox"> Cowpatty是一款用于对WPA-PSK密码发动字典攻击的破解工具<br>  <img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/20220530151802.png"><br>  <img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/20220530151820.png"> </li><li><input disabled="" type="checkbox"> 与aircrack-ng工具不同， Cowpatty支持使用预计算pmk文件进行WPA-PSK密码破解。</li><li><input disabled="" type="checkbox"> 首先事先根据密码字典和SSID生成相应的PSK文件，再让Cowpatty使用预计算pmk文件进行密码破解，这样就可以大大提高破解速度。</li><li><input disabled="" type="checkbox"> genpmk工具用于根据密码字典和SSID生成相应PSK文件，其语法格式如下：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">genpmk –f &lt;密码字典文件&gt; -d &lt;预计算pmk文件&gt; -s &lt;SSID&gt;</span><br></pre></td></tr></table></figure><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/20220530152006.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macbook </tag>
            
            <tag> 破解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫python语言入门学习</title>
      <link href="/2022/05/10/%E7%88%AC%E8%99%ABpython%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/05/10/%E7%88%AC%E8%99%ABpython%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="requests包命令介绍"><a href="#requests包命令介绍" class="headerlink" title="requests包命令介绍"></a>requests包命令介绍</h1><ul><li>安装requests和引用<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install requests</span><br><span class="line">import requests</span><br></pre></td></tr></table></figure><h2 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">request.get(&#x27;url&#x27;)</span><br></pre></td></tr></table></figure></li><li><input disabled="" type="checkbox"> params参数<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">r = requests.get(&#x27;https://www.douban.com/search&#x27;, params=&#123;&#x27;q&#x27;: &#x27;python&#x27;, &#x27;cat&#x27;: &#x27;1001&#x27;&#125;)</span><br><span class="line">r.url # 实际请求的URL</span><br><span class="line">&#x27;https://www.douban.com/search?q=python&amp;cat=1001&#x27;</span><br></pre></td></tr></table></figure><h2 id="encoding参数"><a href="#encoding参数" class="headerlink" title="encoding参数"></a>encoding参数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">r.encoding  </span><br><span class="line">recoding=&#x27;utf-8&#x27;</span><br><span class="line">可以指定参数不过request自动检测编码</span><br></pre></td></tr></table></figure><h2 id="headers参数"><a href="#headers参数" class="headerlink" title="headers参数"></a>headers参数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">r = requests.get(&#x27;https://www.douban.com/&#x27;, headers=&#123;&#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit&#x27;&#125;)</span><br><span class="line">可以直接在里面写也可以先给headers命名一个参数然后里面用headers代替</span><br></pre></td></tr></table></figure><h2 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h2></li><li><input disabled="" type="checkbox"> 只需要吧<code>get()</code>方法变成<code>post()</code>,然后传入<code>data</code>参数作为post请求的数据<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">r = requests.post(&#x27;https://accounts.douban.com/login&#x27;, data=&#123;&#x27;form_email&#x27;: &#x27;abc@example.com&#x27;, &#x27;form_password&#x27;: &#x27;123456&#x27;&#125;)</span><br></pre></td></tr></table></figure></li><li><input disabled="" type="checkbox"> requests默认使用<code>application/x-www-form-urlencoded</code>对POST数据编码。如果要传递JSON数据，可以直接传入json参数：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">params = &#123;&#x27;key&#x27;: &#x27;value&#x27;&#125;</span><br><span class="line">r = requests.post(url, json=params) # 内部自动序列化为JSON</span><br></pre></td></tr></table></figure></li><li><input disabled="" type="checkbox"> 类似的，上传文件需要更复杂的编码格式，但是<code>requests</code>把它简化成<code>files</code>参数：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upload_files = &#123;&#x27;file&#x27;: open(&#x27;report.xls&#x27;, &#x27;rb&#x27;)&#125;</span><br><span class="line">r = requests.post(url, files=upload_files)</span><br></pre></td></tr></table></figure></li><li><input disabled="" type="checkbox"> requests对Cookie做了特殊处理，使得我们不必解析Cookie就可以轻松获取指定的Cookie：</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">r.cookies[&#x27;ts&#x27;]</span><br><span class="line">&#x27;example_cookie_12345&#x27;</span><br></pre></td></tr></table></figure><ul><li><input disabled="" type="checkbox"> 传入cookies跟headers类似 </li><li>如果要制定时间单位为秒在里面家timeout参数</li></ul><h1 id="数据选择的三种方式"><a href="#数据选择的三种方式" class="headerlink" title="数据选择的三种方式"></a>数据选择的三种方式</h1><ul><li><input disabled="" type="checkbox"> bs4</li><li><input disabled="" type="checkbox"> re正则表达式</li><li><input disabled="" type="checkbox"> xpath</li></ul><h2 id="re包介绍（正则表达式"><a href="#re包介绍（正则表达式" class="headerlink" title="re包介绍（正则表达式)"></a>re包介绍<a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017639890281664">（正则表达式)</a></h2><ul><li><input disabled="" type="checkbox"> 在正则表达式中，如果直接给出字符，就是精确匹配。用<code>\d</code>可以匹配一个数字，<code>\w</code>可以匹配一个字母或数字，所以：</li><li>所以<code>&#39;00\d&#39;</code>可以匹配<code>&#39;007&#39;</code>，但无法匹配<code>&#39;00A&#39;</code>；</li><li><code>&#39;\d\d\d&#39;</code>可以匹配<code>&#39;010&#39;</code>；</li><li><code>&#39;\w\w\d&#39;</code>可以匹配<code>&#39;py3&#39;</code>；</li><li><input disabled="" type="checkbox"> .可以匹配任意字符</li><li><code>&#39;py.&#39;</code>可以匹配<code>&#39;pyc&#39;</code>、<code>&#39;pyo&#39;</code>、<code>&#39;py!&#39;</code><br>要匹配变长的字符，在正则表达式中，用<code>*</code>表示任意个字符（包括0个），用<code>+</code>表示至少一个字符，用<code>?表示0个或1个字符，用</code>{n}<code>表示n个字符，用</code>{n,m}&#96;表示n-m个字符：</li><li><input disabled="" type="checkbox"> <code>[]</code>表示范围</li><li><code>[0-9a-zA-Z\_]</code>可以匹配一个数字、字母或者下划线；</li><li><code>[a-zA-Z\_][0-9a-zA-Z\_]&#123;0, 19&#125;</code>更精确地限制了变量的长度是1-20个字符（前面1个字符+后面最多19个字符）</li><li><input disabled="" type="checkbox"> 犹豫python本省用\转义所以<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s = &#x27;ABC\\-001&#x27; # Python的字符串</span><br><span class="line"># 对应的正则表达式字符串变成：</span><br><span class="line"># &#x27;ABC\-001&#x27;</span><br></pre></td></tr></table></figure></li><li>[  ] 还有一种方式不用转义<code>r</code>前缀<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s = r&#x27;ABC\-001&#x27; # Python的字符串</span><br><span class="line"># 对应的正则表达式字符串不变：</span><br><span class="line"># &#x27;ABC\-001&#x27;</span><br></pre></td></tr></table></figure><h2 id="xpath链接"><a href="#xpath链接" class="headerlink" title="xpath链接"></a>xpath<a href="https://www.w3school.com.cn/xpath/xpath_syntax.asp">链接</a></h2></li><li>XPath 使用路径表达式来选取 XML 文档中的节点或节点集。节点是通过沿着路径 (path) 或者步 (steps) 来选取的。</li></ul><table><thead><tr><th align="center">表达式</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">&#x2F;</td><td align="center">从根结点开始选取</td></tr><tr><td align="center">&#x2F;&#x2F;</td><td align="center">从匹配选择的当前节点选择文档中的节点不考虑位置这个&#x2F;&#x2F;很随意</td></tr><tr><td align="center">nodename</td><td align="center">选取此节点的所有子节点。</td></tr><tr><td align="center">.</td><td align="center">选取当前节点。</td></tr><tr><td align="center">..</td><td align="center">选取当前节点的父节点。</td></tr><tr><td align="center">@</td><td align="center">选取属性。</td></tr></tbody></table><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><table><thead><tr><th align="center">路径的表达</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">bookstore</td><td align="center">选取 bookstore 元素的所有子节点。</td></tr><tr><td align="center">&#x2F;bookstore</td><td align="center">选取根元素 bookstore。注释：假如路径起始于正斜杠( &#x2F; )，则此路径始终代表到某元素的绝对路径！</td></tr><tr><td align="center">bookstore&#x2F;book</td><td align="center">选取属于 bookstore 的子元素的所有 book 元素。</td></tr><tr><td align="center">&#x2F;&#x2F;book</td><td align="center">选取所有 book 子元素，而不管它们在文档中的位置。</td></tr><tr><td align="center">bookstore&#x2F;&#x2F;book</td><td align="center">选择属于 bookstore 元素的后代的所有 book 元素，而不管它们位于 bookstore 之下的什么位置。</td></tr><tr><td align="center">&#x2F;&#x2F;@lang</td><td align="center">选取名为 lang 的所有属性。</td></tr></tbody></table><h2 id="谓语"><a href="#谓语" class="headerlink" title="谓语"></a>谓语</h2><ul><li>谓语用来查找某个特定的节点或者包含某个指定的值的节点。谓语被嵌在方括号中。</li><li><input disabled="" type="checkbox"> 实例</li></ul><table><thead><tr><th align="center">路径表达式</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">&#x2F;bookstore&#x2F;book[1]</td><td align="center">选取属于 bookstore 子元素的第一个 book 元素。</td></tr><tr><td align="center">&#x2F;bookstore&#x2F;book[last()]</td><td align="center">选取属于 bookstore 子元素的最后一个 book 元素。</td></tr><tr><td align="center">&#x2F;bookstore&#x2F;book[last()-1]</td><td align="center">选取属于 bookstore 子元素的倒数第二个 book 元素。</td></tr><tr><td align="center">&#x2F;bookstore&#x2F;book[position()&lt;3]</td><td align="center">选取最前面的两个属于 bookstore 元素的子元素的 book 元素。</td></tr><tr><td align="center">&#x2F;&#x2F;title[@lang]</td><td align="center">选取所有拥有名为 lang 的属性的 title 元素。</td></tr><tr><td align="center">&#x2F;&#x2F;title[@lang&#x3D;’eng’]</td><td align="center">选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性。</td></tr><tr><td align="center">&#x2F;bookstore&#x2F;book[price&gt;35.00]</td><td align="center">选取 bookstore 元素的所有 book 元素，且其中的 price 元素的值须大于 35.00。</td></tr><tr><td align="center">&#x2F;bookstore&#x2F;book[price&gt;35.00]&#x2F;title</td><td align="center">选取 bookstore 元素中的 book 元素的所有 title 元素，且其中的 price 元素的值须大于 35.00。</td></tr></tbody></table><h1 id="json包"><a href="#json包" class="headerlink" title="json包"></a><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017624706151424">json包</a></h1><p>如果我们要在不同的编程语言之间传递对象，就必须把对象序列化为标准格式，比如XML，但更好的方法是序列化为JSON，因为JSON表示出来就是一个字符串，可以被所有语言读取，也可以方便地存储到磁盘或者通过网络传输。JSON不仅是标准格式，并且比XML更快，而且可以直接在Web页面中读取，非常方便。</p><p>JSON表示的对象就是标准的JavaScript语言的对象，JSON和Python内置的数据类型对应如下：</p><ul><li>{}  dict</li><li>[]  list</li><li>“string”  str</li><li>123.56 int或float</li><li>true&#x2F;false   True&#x2F;float</li><li>null      noner</li><li><input disabled="" type="checkbox"> 举例下面可以把pthon对象转换到json格式的转换<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import json</span><br><span class="line">d = dict(name=&#x27;Bob&#x27;, age=20, score=88)</span><br><span class="line">json.dumps(d)</span><br><span class="line">&#x27;&#123;&quot;age&quot;: 20, &quot;score&quot;: 88, &quot;name&quot;: &quot;Bob&quot;&#125;&#x27;</span><br></pre></td></tr></table></figure></li><li>json.dumps() 将 Python 对象编码成 JSON 字符串</li><li>json.loads() 将已编码的 JSON 字符串解码为 Python 对象</li></ul><h1 id="csv模块"><a href="#csv模块" class="headerlink" title="csv模块"></a><a href="https://docs.python.org/zh-cn/3/library/csv.html">csv模块</a></h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -- coding: utf-8 --</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;https://voice.baidu.com/act/newpneumonia/newpneumonia/?from=osari_aladin_banner&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re <span class="comment">#正则表达式</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;user-agent&#x27;</span>:</span><br><span class="line">    <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.54 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.csv&#x27;</span>, mode=<span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    csv_writer = csv.writer(f)</span><br><span class="line">    csv_writer.writerow([<span class="string">&#x27;area&#x27;</span>,<span class="string">&#x27;curConfirm&#x27;</span>,<span class="string">&#x27;confirmed&#x27;</span>,<span class="string">&#x27;curConfirmRelative&#x27;</span>,<span class="string">&#x27;crued&#x27;</span>,<span class="string">&#x27;died&#x27;</span>])</span><br><span class="line">url = <span class="string">&#x27;https://voice.baidu.com/act/newpneumonia/newpneumonia/?from=osari_aladin_banner&#x27;</span></span><br><span class="line">response = requests.get(url=url, headers=headers) <span class="comment">#发送请求</span></span><br><span class="line"><span class="comment">#print(response) &lt;200&gt;访问成功</span></span><br><span class="line"><span class="comment">#print(response.text)</span></span><br><span class="line">html_data = response.text</span><br><span class="line"><span class="comment">#解析数据</span></span><br><span class="line">json_str = re.findall(<span class="string">&#x27;&quot;component&quot;:\[(.*)\],&#x27;</span>, html_data)[<span class="number">0</span>]</span><br><span class="line"><span class="comment">#print(json_str)</span></span><br><span class="line">json_dict = json.loads(json_str)</span><br><span class="line">caseList = json_dict[<span class="string">&#x27;caseList&#x27;</span>]</span><br><span class="line">caseOutsideList=json_dict[<span class="string">&quot;caseOutsideList&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> case <span class="keyword">in</span> caseList:</span><br><span class="line">    area = case[<span class="string">&#x27;area&#x27;</span>] <span class="comment">#省份</span></span><br><span class="line">    curConfirm = case[<span class="string">&quot;curConfirm&quot;</span>]<span class="comment">#确证</span></span><br><span class="line">    confirmed = case[<span class="string">&quot;confirmed&quot;</span>]  <span class="comment"># 累计确证</span></span><br><span class="line">    curConfirmRelative = case[<span class="string">&quot;curConfirmRelative&quot;</span>]<span class="comment">#当前确证</span></span><br><span class="line">    crued = case[<span class="string">&quot;crued&quot;</span>]<span class="comment">#累计治愈</span></span><br><span class="line">    died = case[<span class="string">&quot;died&quot;</span>]<span class="comment">#累计死亡</span></span><br><span class="line"> <span class="comment">#   print(area, curConfirm, curConfirmRelative, died, crued, confirmed)</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.csv&#x27;</span>,mode=<span class="string">&#x27;a&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>,newline=<span class="string">&#x27;&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">        csv_writer=csv.writer(f)</span><br><span class="line">        csv_writer.writerow([area,curConfirm,confirmed,curConfirmRelative,crued,died])</span><br></pre></td></tr></table></figure><ul><li><input disabled="" type="checkbox"> 一个简单的爬虫程序csv_writer.writerow作用是写入这些字典当中的数据</li></ul><h1 id="panda导入数据模块"><a href="#panda导入数据模块" class="headerlink" title="panda导入数据模块"></a><a href="https://zhuanlan.zhihu.com/p/90925476">panda导入数据模块</a></h1><p> <img src="https://raw.githubusercontent.com/deletee-china/-LH_pic/master/img/20220508122652.png" alt="panda_1"> </p><h2 id="案例读取mysql数据库数据"><a href="#案例读取mysql数据库数据" class="headerlink" title="案例读取mysql数据库数据"></a>案例读取mysql数据库数据</h2> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> import pymysql</span><br><span class="line"> import panda as pd</span><br><span class="line"> conn = pymysql.connect(host=&#x27;localhost&#x27;, user=&#x27;root&#x27;, password=&#x27;test&#x27;,database=&#x27;test&#x27;, port=3306, charset=&#x27;utf8&#x27;)</span><br><span class="line">#连接mysql数据库</span><br><span class="line">user = pd.read_sql(&#x27;select * from topy&#x27;, conn)</span><br><span class="line">#读取数据</span><br><span class="line">conn.close()</span><br><span class="line">#关闭连接</span><br><span class="line">print(User)</span><br><span class="line">#数据输出</span><br></pre></td></tr></table></figure><h1 id="selenium自动化web的运用"><a href="#selenium自动化web的运用" class="headerlink" title="selenium自动化web的运用"></a>selenium自动化web的运用</h1><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/20220512184117.png" alt="masss"><br>如上所示我就导入了webdriver和selenium和自动化查找webdriver的操作<br><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/20220512184226.png"> </p><ul><li>如上这事webmanage的一个option功能</li><li><input disabled="" type="checkbox"> .get()打开一个网址<h2 id="规避检测和无头操作的实现"><a href="#规避检测和无头操作的实现" class="headerlink" title="规避检测和无头操作的实现"></a>规避检测和无头操作的实现</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="comment">#实现规避检测</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ChromeOptions</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="comment">#实现无可视化界面的操作</span></span><br><span class="line">chrome_options=Options()</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 实现规避检测</span></span><br><span class="line">option= ChromeOptions()</span><br><span class="line">option.add_experimental_option(<span class="string">&#x27;excludeSwitches&#x27;</span>,[<span class="string">&#x27;enable-automation&#x27;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#如何实现让seleium怎么规避</span></span><br><span class="line">bro= webdriver.Chrome(executable_path=<span class="string">&#x27;./chromedriver &#x27;</span>,chrome_options=chrome_options,options=option)</span><br></pre></td></tr></table></figure><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2></li><li><input disabled="" type="checkbox"> 需要注意的是find_element_by_xpath()已经被重构</li><li>by 都需要 find_element(By.Xpath,”xxx”)<br><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/20220513000953.png" alt="selen"> </li><li>在对选择器的选择时对明显的<code>text</code>可以选择<code>PATRIAL_LINK_TEXT</code>这是对标签的text值进行搜索算是模糊搜索</li><li><code>XPATH</code>选择时往往需要用到<code>XPATH HELPERS</code>来进行辅助更加方便</li><li>在使用<code>seleium</code>时需要注意的是<code>iframe</code>这决定你是否能够正确的选中你想要的内容</li><li>from selenium.webdriver.common.by import By</li><li><code>by</code>像上面一样引用 ！！！需要注意的是<code>element</code>和<code>elements</code></li><li>获得标签内的属性值是</li><li><code>video_data.get_attribute(&#39;src&#39;)</code>   这样就可以获得<code>video</code>标签内的<code>src</code>属性值<code>get_attribute</code>只能对一个实例进行获得属性值所以当你需要获得一个<code>list</code>的<code>src</code>时你需要通过对<code>list</code>的遍历来获得属性值</li><li><code>selenium</code>虽然好用但是速度上还是<code>requests</code>有优势实例上需要<code>requests</code>和<code>selenium</code>结合运用来进行爬取图片信息啥的我认为<code>selenium</code>的优势就在于他能够比较简单的获取网页的动态源代码然后风险比较少<h2 id="经验"><a href="#经验" class="headerlink" title="经验"></a>经验</h2></li><li><input disabled="" type="checkbox"> 有时候<code>click</code>命令会报错应该是选择不到指定的位置,选择的位置被一个标签覆盖了可以把<code>page.click()</code>换成        <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">driver.execute_script(&quot;arguments[0].click();&quot;,nextPage)</span><br></pre></td></tr></table></figure></li><li><input disabled="" type="checkbox"> 在对网页信息进行选择的时候要帅选好数据选择到正确的标签内不然可能会出现爬到一半出现报错的问题最后,指定的时候最好用XPATH的CLASS属性或者唯一标识那种指定</li></ul><hr><h2 id="实例一"><a href="#实例一" class="headerlink" title="实例一"></a>实例一</h2><ul><li>对壁纸网站4k的爬取<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span>  selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ChromeOptions</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line">option= ChromeOptions()</span><br><span class="line">option.add_experimental_option(<span class="string">&#x27;excludeSwitches&#x27;</span>,[<span class="string">&#x27;enable-automation&#x27;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">YunSpider</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,url</span>):</span><br><span class="line">        self.url=url</span><br><span class="line">        self.driver=webdriver.Chrome(executable_path=<span class="string">&#x27;./chromedriver &#x27;</span>,options=option)</span><br><span class="line">        <span class="comment">#打开网站提取数据翻页</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getcontent</span>(<span class="params">self</span>):</span><br><span class="line">        self.driver.get(self.url)</span><br><span class="line">        <span class="comment">#先进如iframe</span></span><br><span class="line">        self.driver.switch_to.frame(<span class="number">0</span>)<span class="comment">#0代表第一个框</span></span><br><span class="line">        js=<span class="string">&#x27;window.scrollBy(0,8000)&#x27;</span></span><br><span class="line">        self.driver.execute_script(js)</span><br><span class="line">        <span class="comment">#翻页的实现</span></span><br><span class="line">        <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">            selector= self.driver.find_elements(By.XPATH,<span class="string">&#x27;//div[@class=&quot;cmmts j-flag&quot;]/div&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> select <span class="keyword">in</span> selector:</span><br><span class="line">                text=select.find_element(By.XPATH,<span class="string">&#x27;.//div[@class=&quot;cnt f-brk&quot;]&#x27;</span>).text</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span> (<span class="string">&quot;网易云音乐评论.txt&quot;</span>,<span class="string">&#x27;a&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">                    f.write(text+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">#找到下一页的元素然后进行点击 获取文本连接属于模糊匹配</span></span><br><span class="line">            nextPage=self.driver.find_element(By.PARTIAL_LINK_TEXT, <span class="string">&quot;下一页&quot;</span>)</span><br><span class="line">            nextPage.click()</span><br><span class="line">            sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    url=<span class="string">&#x27;https://music.163.com/#/song?id=446557635&#x27;</span></span><br><span class="line">    yunSpider=YunSpider(url)</span><br><span class="line">    yunSpider.getcontent()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="实例二"><a href="#实例二" class="headerlink" title="实例二"></a>实例二</h2></li><li>对在线之家mp4文件的爬取<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span>  selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ChromeOptions</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">chrome_options=Options()</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)</span><br><span class="line">headers = &#123;</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>:</span><br><span class="line">            <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.54 Safari/537.36&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">url=<span class="string">&#x27;https://www.zxzjtv.com/detail/3762.html&#x27;</span></span><br><span class="line">option = ChromeOptions()</span><br><span class="line">option.add_experimental_option(<span class="string">&#x27;excludeSwitches&#x27;</span>, [<span class="string">&#x27;enable-automation&#x27;</span>])</span><br><span class="line">driver = webdriver.Chrome(executable_path=<span class="string">&#x27;./chromedriver &#x27;</span>, options=option,chrome_options=chrome_options)</span><br><span class="line">driver.get(url)</span><br><span class="line">os.mkdir(<span class="string">&quot;神秘海域&quot;</span>)</span><br><span class="line">li_list=driver.find_elements(By.XPATH,<span class="string">&quot;/html/body/div[1]/div/div/div/div/ul[1]/li/a&quot;</span>)</span><br><span class="line">length=<span class="built_in">len</span>(li_list)</span><br><span class="line"><span class="built_in">print</span>(li_list)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,length):</span><br><span class="line">    li_list = driver.find_elements(By.XPATH, <span class="string">&quot;/html/body/div[1]/div/div/div/div/ul[1]/li/a&quot;</span>)</span><br><span class="line">    link=li_list[i]</span><br><span class="line">    url=link.get_attribute(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">    mp4_name=link.text</span><br><span class="line">    <span class="built_in">print</span>(url,mp4_name)</span><br><span class="line">    driver.get(url)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    driver.switch_to.frame(<span class="number">2</span>)</span><br><span class="line">    mp4_src=driver.find_element(By.XPATH,<span class="string">&#x27;//div[@class=&quot;dplayer-video-wrap&quot;]/video&#x27;</span>)</span><br><span class="line">    mp4_src2=mp4_src.get_attribute(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(mp4_src2)</span><br><span class="line">    response=requests.get(mp4_src2,headers=headers).content</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;正在在下&quot;</span>)</span><br><span class="line">    sss=<span class="string">&quot;神秘海域/&quot;</span>+mp4_name+<span class="string">&#x27;.mp4&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span> (sss,<span class="string">&#x27;wb&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">           f.write(response)</span><br><span class="line">    <span class="built_in">print</span>(mp4_name+<span class="string">&quot;下载完成&quot;</span>)</span><br><span class="line">    driver.back()</span><br></pre></td></tr></table></figure><h1 id="scrapy框架的学习"><a href="#scrapy框架的学习" class="headerlink" title="scrapy框架的学习"></a>scrapy框架的学习</h1></li><li><input disabled="" type="checkbox"> 安装<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install scrapy</span><br></pre></td></tr></table></figure></li><li>scrapy -h</li><li>scrapy命令行格式：&gt;scrapy <command> [options][args]</li><li>scrapy常用命令：</li><li>startproject—创建一个新工程—scrapy startproject <name> [dir]</li><li>genspider—创建一个爬虫—scrapy genspider [options] <name> <domains></li><li>settings—获得爬虫配置—scrapy settings [options]</li><li>crawl—运行一个爬虫—scrapy crawl <spider></li><li>list—列出工程中所有爬虫—scrapy list</li><li>shell—启动url调试命令行—scrapy shell [url]<h2 id="scrapy的架构"><a href="#scrapy的架构" class="headerlink" title="scrapy的架构"></a>scrapy的架构</h2><img src="https://pic2.zhimg.com/v2-5f5b947bf2802e7e3aa4e553baf80131_b.jpg"><br><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/20220513002323.png"></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo框架入门学习</title>
      <link href="/2022/05/08/hexo%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/05/08/hexo%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="博客框架hexo本地的安装说明"><a href="#博客框架hexo本地的安装说明" class="headerlink" title="博客框架hexo本地的安装说明"></a>博客框架hexo本地的安装说明</h1><ul><li>前提准备了解<code>hexo</code>框架安装需要什么依赖</li><li><code>hexo</code>依赖<code>nodejs</code> 然后库的传输需要<code>git</code><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2></li><li><input disabled="" type="checkbox"> 通常来说本地环境的安装比服务器更容易搭建因为服务器环境往往需要考虑更多比如安全问题还有各种安装问题就比如我<code>centos8.2</code>的yum yum update了一下居然报错了发现没有这个源查了一下原来是cetos官网已经不对<code>centos8</code>支持</li><li><code>macos</code>使用<code>hombrew</code>下载<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install git </span><br><span class="line">brew install nodejs</span><br></pre></td></tr></table></figure></li><li><code>centos</code> 可以使用<code>yum</code>或者<code>weget</code>下载官方解压包自己解压<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install git</span><br><span class="line">yum install nodejs</span><br></pre></td></tr></table></figure><h2 id="安装hexo框架"><a href="#安装hexo框架" class="headerlink" title="安装hexo框架"></a>安装<code>hexo</code>框架</h2></li><li>创建一个文件夹你的<code>hexo</code>框架就下载在里面<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure></li><li><input disabled="" type="checkbox"> 现在你的hexo框架就基本上安装完毕了</li><li>目录应该跟下面大差不差<br><img src="https://raw.githubusercontent.com/deletee-china/-LH_pic/master/img/20220508125145.png" alt="hexo_1"> </li><li><code>config.yml</code>就是hexo的配置文件一些关于hexo的配置在里面配置<h2 id="hexo一些基本使用"><a href="#hexo一些基本使用" class="headerlink" title="hexo一些基本使用"></a>hexo一些基本使用</h2> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new post &quot;name&quot; #新建文章</span><br><span class="line">hexo g  #渲染</span><br><span class="line">hexo s  #部署到本地</span><br><span class="line">hexo d  #部署到远程git库</span><br></pre></td></tr></table></figure><h2 id="git库的连接"><a href="#git库的连接" class="headerlink" title="git库的连接"></a><code>git库</code>的连接</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;username&quot;</span><br><span class="line">git config --global user.email &quot;1941689965@qq.com&quot;</span><br><span class="line">用户名和邮箱自行修改</span><br></pre></td></tr></table></figure></li><li>用<code>ssh</code>的话还需要获取<code>ssh</code>的公钥 </li><li>如果你不知道有没有一般来说ssh的共钥如果有就放在你家目录下的.ssh文件中<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></li><li>如果有就是上面那条命令查看公钥</li><li>没有就创建一个key<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;1941689965@qq.com&quot;</span><br></pre></td></tr></table></figure></li><li>然后重复之前的操作开查看密钥<h2 id="远程库"><a href="#远程库" class="headerlink" title="远程库"></a>远程库</h2></li><li><input disabled="" type="checkbox"> 远程库的选择(github，码云上都有类似服务Pages一个静态网站,你也可以把你的库推送到你的服务器上)</li><li>githubpage由于访问速度的关系不推荐有条件的话可以买个云轻量应用服务器,注册一个域名当然如果在服务器上搭建网站服务器在国内也需要备案</li><li>gittee还没有使用过不做评价<h2 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h2><h3 id="20022-x2F-5-x2F-10-底部美化shields-io"><a href="#20022-x2F-5-x2F-10-底部美化shields-io" class="headerlink" title="20022&#x2F;5&#x2F;10 底部美化shields.io"></a>20022&#x2F;5&#x2F;10 底部美化<a href="https://shields.io/">shields.io</a></h3><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/20220508174200.png" alt="sss"> </li><li>在主题配置文件的custom_text中添加生成的url连接即可需要有点前段基础<h2 id="美化日志添加壁纸模块"><a href="#美化日志添加壁纸模块" class="headerlink" title="美化日志添加壁纸模块"></a>美化日志添加壁纸模块</h2><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/20220509112009.png"> </li><li>如图在picture模块引用外部标签达到如下效果<br><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/20220509112103.png"><br>连接的图片库跟普通页面创建一样的方法<br>图片模块今天还没具体设置</li></ul><h2 id="2022-x2F-5-x2F-11美化日记"><a href="#2022-x2F-5-x2F-11美化日记" class="headerlink" title="2022&#x2F;5&#x2F;11美化日记"></a>2022&#x2F;5&#x2F;11美化日记</h2><ul><li><input disabled="" type="checkbox"> 发现分类页面还是需要的又重新增加了分类模块</li><li><input disabled="" type="checkbox"> 增加了个人博客的后台功能能够在本地后台访问</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macos系统命令的学习</title>
      <link href="/2022/05/07/macos%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/05/07/macos%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="命令的简介"><a href="#命令的简介" class="headerlink" title=" 命令的简介"></a> 命令的简介</h2><h1 id="open命令"><a href="#open命令" class="headerlink" title="open命令"></a>open命令</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># open</span><br><span class="line"># Opens files, directories and applications.</span><br><span class="line"># More information: &lt;https://ss64.com/osx/open.html&gt;.</span><br><span class="line"></span><br><span class="line"># Open a file with the associated application:</span><br><span class="line">open file.ext</span><br><span class="line"></span><br><span class="line"># Run a graphical macOS application:</span><br><span class="line">open -a &quot;Application&quot;</span><br><span class="line"></span><br><span class="line"># Run a graphical macOS app based on the bundle identifier (refer to `osascript` for an easy way to get this):</span><br><span class="line">open -b com.domain.application</span><br><span class="line"></span><br><span class="line"># Open the current directory in Finder:</span><br><span class="line">open .</span><br><span class="line"></span><br><span class="line"># Reveal a file in Finder:</span><br><span class="line">open -R path/to/file</span><br><span class="line"></span><br><span class="line"># Open all the files of a given extension in the current directory with the associated application:</span><br><span class="line">open *.ext</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="systemsetup命令"><a href="#systemsetup命令" class="headerlink" title="systemsetup命令"></a>systemsetup命令</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># systemsetup</span><br><span class="line"># Configure System Preferences machine settings.</span><br><span class="line"># More information: &lt;https://support.apple.com/guide/remote-desktop/about-systemsetup-apd95406b8d/mac&gt;.</span><br><span class="line"></span><br><span class="line"># Enable remote login (SSH):</span><br><span class="line">systemsetup -setremotelogin on</span><br><span class="line">#打开ssh</span><br><span class="line"># Specify timezone, NTP Server and enable network time:</span><br><span class="line">systemsetup -settimezone &quot;US/Pacific&quot; -setnetworktimeserver us.pool.ntp.org -setusingnetworktime on</span><br><span class="line"></span><br><span class="line"># Make the machine never sleep and automatically restart on power failure or kernel panic:</span><br><span class="line">systemsetup -setsleep off -setrestartpowerfailure on -setrestartfreeze on</span><br><span class="line"></span><br><span class="line"># List valid startup disks:</span><br><span class="line">systemsetup -liststartupdisks</span><br><span class="line"></span><br><span class="line"># Specify a new startup disk:</span><br><span class="line">systemsetup -setstartupdisk path</span><br></pre></td></tr></table></figure><h1 id="homebrew的使用"><a href="#homebrew的使用" class="headerlink" title="homebrew的使用"></a>homebrew的使用</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Update</span><br><span class="line">brew update</span><br><span class="line"># Upgrade everything</span><br><span class="line">brew upgrade</span><br><span class="line"># Upgrade specific formula</span><br><span class="line">brew upgrade &lt;formula&gt;</span><br><span class="line"># Install formula</span><br><span class="line">brew install &lt;formula&gt;</span><br><span class="line"># Install cask</span><br><span class="line">brew install --cask &lt;formula&gt;</span><br><span class="line"># Uninstall</span><br><span class="line">brew uninstall &lt;formula&gt;</span><br><span class="line"># List installed formulae</span><br><span class="line">brew list</span><br><span class="line"># Fix</span><br><span class="line">brew doctor</span><br><span class="line"># Clean up</span><br><span class="line">brew cleanup</span><br></pre></td></tr></table></figure><h1 id="python-文件http-servers的基本使用"><a href="#python-文件http-servers的基本使用" class="headerlink" title="python 文件http.servers的基本使用"></a>python 文件http.servers的基本使用</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -m http.server</span><br><span class="line">python -m http.server:8888</span><br></pre></td></tr></table></figure><h1 id="git库的使用"><a href="#git库的使用" class="headerlink" title="git库的使用"></a>git库的使用</h1><ul><li><input disabled="" type="checkbox"> git 库的工作流程<br><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/20220513104031.png"> </li><li>workspace：工作区</li><li>staging area：暂存区&#x2F;缓存区</li><li>local repository：版本库或本地仓库</li><li>remote repository：远程仓库<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init 初始化仓库</span><br><span class="line">git add 将文件添加到暂存区</span><br><span class="line">git commit 将暂存区的内容添加到仓库中</span><br><span class="line">git clone -b 拷贝一份远程仓库-b选择分支</span><br><span class="line">git status 查看仓库当前的状态</span><br><span class="line">git diff 比较稳健的不同</span><br><span class="line">git log 查看历史提交记录</span><br><span class="line">git remote 远程仓库的操作remote add添加远程库 </span><br><span class="line">git remote -v 查看当前仓库绑定的远程仓库</span><br><span class="line">git pull 下载远程代码并合并</span><br><span class="line">git push 上传远程仓库代码并合并</span><br><span class="line">git reflog 查看工作书树提交记录</span><br><span class="line">git checkout 切换分支或恢复工作树的文件!!危险的一个命令</span><br></pre></td></tr></table></figure><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/20220531220714.png"> <h2 id="virtualev工具的使用"><a href="#virtualev工具的使用" class="headerlink" title="virtualev工具的使用"></a>virtualev工具的使用</h2></li><li>虚拟环境其实就是在命令的环境中创建一个python比如3.9的版本啥的然后里面的python执行用当前的虚拟环境常用于避免包之间的冲突<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">virtualenv -p /usr/bin/python3.5 venv #venv 是创建虚拟环境的名字 前面是想创建的版本</span><br><span class="line">source venv/bin/activate</span><br><span class="line">#进入环境是source bin文件下的avtivate</span><br><span class="line">#我记得我下载了一个zsh插件他定义了一些命令能够自动进入环境现在一下子想不起来</span><br><span class="line">deactivate #退出当前环境</span><br><span class="line">#想要删除该环境只要删除这个文件名内的所有内容</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> macos </tag>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
