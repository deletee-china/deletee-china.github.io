<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>neovim炼狱级别的学习</title>
      <link href="/2022/05/14/neovim%E7%82%BC%E7%8B%B1%E7%BA%A7%E5%88%AB%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/05/14/neovim%E7%82%BC%E7%8B%B1%E7%BA%A7%E5%88%AB%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="启动Vim"><a href="#启动Vim" class="headerlink" title="启动Vim"></a>启动Vim</h2><ul><li>vim -c cmd file: 在打开文件前，先执行指定的命令；</li><li>vim -r file: 恢复上次异常退出的文件；</li><li>vim -R file: 以只读的方式打开文件，但可以强制保存；</li><li>vim -M file: 以只读的方式打开文件，不可以强制保存；</li><li>vim -y num file: 将编辑窗口的大小设为num行；</li><li>vim + file: 从文件的末尾开始；</li><li>vim +num file: 从第num行开始；</li><li>vim +&#x2F;string file: 打开file，并将光标停留在第一个找到的string上。</li><li>vim –remote file: 用已有的vim进程打开指定的文件。 如果你不想启用多个vim会话，这个很有用。但要注意， 如果你用vim，会寻找名叫VIM的服务器；如果你已经有一个gvim在运行了， 你可以用gvim –remote file在已有的gvim中打开文件。</li></ul><h2 id="文档操作"><a href="#文档操作" class="headerlink" title="文档操作"></a>文档操作</h2><ul><li>:e file 关闭当前编辑的文件，并开启新的文件。 如果对当前文件的修改未保存，vi会警告。</li><li>:e! file –放弃对当前文件的修改，编辑新的文件。</li><li>:e+file – 开始新的文件，并从文件尾开始编辑。</li><li>:e+n file – 开始新的文件，并从第n行开始编辑。</li><li>:enew –编译一个未命名的新文档。(CTRL-W n)</li><li>:e – 重新加载当前文档。</li><li>:e! – 重新加载当前文档，并丢弃已做的改动。</li><li>:e#或ctrl+^ – 回到刚才编辑的文件，很实用。</li><li>:f或ctrl+g – 显示文档名，是否修改，和光标位置。</li><li>:f filename – 改变编辑的文件名，这时再保存相当于另存为。</li><li>gf – 打开以光标所在字符串为文件名的文件。</li><li>:w – 保存修改。</li><li>:n1,n2w filename – 选择性保存从某n1行到另n2行的内容。</li><li>:wq – 保存并退出。</li><li>ZZ – 保存并退出。</li><li>:x – 保存并退出。</li><li>:q[uit] ——退出当前窗口。(CTRL-W q或CTRL-W CTRL-Q)</li><li>:saveas newfilename – 另存为</li><li>:browse e – 会打开一个文件浏览器让你选择要编辑的文件。 如果是终端中，则会打开netrw的文件浏览窗口； 如果是gvim，则会打开一个图形界面的浏览窗口。 实际上:browse后可以跟任何编辑文档的命令，如sp等。 用browse打开的起始目录可以由browsedir来设置：</li><li>:set browsedir&#x3D;last – 用上次访问过的目录（默认）；</li><li>:set browsedir&#x3D;buffer – 用当前文件所在目录；</li><li>:set browsedir&#x3D;current – 用当前工作目录；</li><li>:Sex – 水平分割一个窗口，浏览文件系统；</li><li>:Vex – 垂直分割一个窗口，浏览文件系统；</li></ul><h2 id="光标的移动"><a href="#光标的移动" class="headerlink" title="光标的移动"></a>光标的移动</h2><h3 id="基本移动"><a href="#基本移动" class="headerlink" title="基本移动"></a>基本移动</h3><ul><li><p>以下移动都是在normal模式下。</p></li><li><p>h或退格: 左移一个字符；</p></li><li><p>l或空格: 右移一个字符；</p></li><li><p>j: 下移一行；</p></li><li><p>k: 上移一行；</p></li><li><p>gj: 移动到一段内的下一行；</p></li><li><p>gk: 移动到一段内的上一行；</p></li><li><p>+或Enter: 把光标移至下一行第一个非空白字符。</p></li><li><p>-: 把光标移至上一行第一个非空白字符。</p></li><li><p>w: 前移一个单词，光标停在下一个单词开头；</p></li><li><p>W: 移动下一个单词开头，但忽略一些标点；</p></li><li><p>e: 前移一个单词，光标停在下一个单词末尾；</p></li><li><p>E: 移动到下一个单词末尾，如果词尾有标点，则移动到标点；</p></li><li><p>b: 后移一个单词，光标停在上一个单词开头；</p></li><li><p>B: 移动到上一个单词开头，忽略一些标点；</p></li><li><p>ge: 后移一个单词，光标停在上一个单词末尾；</p></li><li><p>gE: 同 ge ，不过‘单词’包含单词相邻的标点。</p></li><li><p>(: 前移1句。</p></li><li><p>): 后移1句。</p></li><li><p>{: 前移1段。</p></li><li><p>}: 后移1段。</p></li><li><p>fc: 把光标移到同一行的下一个c字符处</p></li><li><p>Fc: 把光标移到同一行的上一个c字符处</p></li><li><p>tc: 把光标移到同一行的下一个c字符前</p></li><li><p>Tc: 把光标移到同一行的上一个c字符后</p></li><li><p>;: 配合f &amp; t使用，重复一次</p></li><li><p>,: 配合f &amp; t使用，反向重复一次</p></li><li><p>上面的操作都可以配合n使用，比如在正常模式(下面会讲到)下输入3h， 则光标向左移动3个字符。</p></li><li><p>0: 移动到行首。</p></li><li><p>g0: 移到光标所在屏幕行行首。</p></li><li><p>^: 移动到本行第一个非空白字符。</p></li><li><p>g^: 同 ^ ，但是移动到当前屏幕行第一个非空字符处。</p></li><li><p>$: 移动到行尾。</p></li><li><p>g$: 移动光标所在屏幕行行尾。</p></li><li><p>n|: 把光标移到递n列上。</p></li><li><p>nG: 到文件第n行。</p></li><li><p>:n<cr> 移动到第n行。</p></li><li><p>:$<cr> 移动到最后一行。</p></li><li><p>H: 把光标移到屏幕最顶端一行。</p></li><li><p>M: 把光标移到屏幕中间一行。</p></li><li><p>L: 把光标移到屏幕最底端一行。</p></li><li><p>gg: 到文件头部。</p></li><li><p>G: 到文件尾部。</p><h2 id="翻屏"><a href="#翻屏" class="headerlink" title="翻屏"></a>翻屏</h2></li><li><p>ctrl+f: 下翻一屏。</p></li><li><p>ctrl+b: 上翻一屏。</p></li><li><p>ctrl+d: 下翻半屏。</p></li><li><p>ctrl+u: 上翻半屏。</p></li><li><p>ctrl+e: 向下滚动一行。</p></li><li><p>ctrl+y: 向上滚动一行。</p></li><li><p>n%: 到文件n%的位置。</p></li><li><p>zz: 将当前行移动到屏幕中央。</p></li><li><p>zt: 将当前行移动到屏幕顶端。</p></li><li><p>zb: 将当前行移动到屏幕底端。</p><h2 id="标记"><a href="#标记" class="headerlink" title="标记"></a>标记</h2></li><li><p>使用标记可以快速移动。到达标记后，可以用Ctrl+o返回原来的位置。 Ctrl+o和Ctrl+i 很像浏览器上的 后退 和 前进 。</p></li><li><p>m{a-z}: 标记光标所在位置，局部标记，只用于当前文件。</p></li><li><p>m{A-Z}: 标记光标所在位置，全局标记。标记之后，退出Vim， 重新启动，标记仍然有效。</p></li><li><p>&#96;{a-z}: 移动到标记位置。</p></li><li><p>‘{a-z}: 移动到标记行的行首。</p></li><li><p>&#96;{0-9}：回到上[2-10]次关闭vim时最后离开的位置。</p></li><li><p><code>: 移动到上次编辑的位置。&#39;&#39;也可以，不过</code>精确到列，而’’精确到行 。如果想跳转到更老的位置，可以按C-o，跳转到更新的位置用C-i。</p></li><li><p>&#96;”: 移动到上次离开的地方。</p></li><li><p>&#96;.: 移动到最后改动的地方。</p></li><li><p>:marks 显示所有标记。</p></li><li><p>:delmarks a b – 删除标记a和b。</p></li><li><p>:delmarks a-c – 删除标记a、b和c。</p></li><li><p>:delmarks a c-f – 删除标记a、c、d、e、f。</p></li><li><p>:delmarks! – 删除当前缓冲区的所有标记。</p></li><li><p>:help mark-motions 查看更多关于mark的知识。</p></li></ul><h2 id="插入文本"><a href="#插入文本" class="headerlink" title="插入文本"></a>插入文本</h2><h3 id="基本插入"><a href="#基本插入" class="headerlink" title="基本插入"></a>基本插入</h3><ul><li>i: 在光标前插入；一个小技巧：按8，再按i，进入插入模式，输入&#x3D;， 按esc进入命令模式，就会出现8个&#x3D;。 这在插入分割线时非常有用，如30i+<esc>就插入了36个+组成的分割线。</li><li>I: 在当前行第一个非空字符前插入；</li><li>gI: 在当前行第一列插入；</li><li>a: 在光标后插入；</li><li>A: 在当前行最后插入；</li><li>o: 在下面新建一行插入；</li><li>O: 在上面新建一行插入；</li><li>:r filename在当前位置插入另一个文件的内容。</li><li>:[n]r filename在第n行插入另一个文件的内容。</li><li>:r !date 在光标处插入当前日期与时间。同理，:r !command可以将其它shell命令的输出插入当前文档。</li></ul><h3 id="改写插入"><a href="#改写插入" class="headerlink" title="改写插入"></a>改写插入</h3><ul><li>c[n]w: 改写光标后1(n)个词。</li><li>c[n]l: 改写光标后n个字母。</li><li>c[n]h: 改写光标前n个字母。</li><li>[n]cc: 修改当前[n]行。</li><li>[n]s: 以输入的文本替代光标之后1(n)个字符，相当于c[n]l。</li><li>[n]S: 删除指定数目的行，并以所输入文本代替之。</li><li>注意，类似cnw,dnw,ynw的形式同样可以写为ncw,ndw,nyw。</li></ul><h2 id="剪切复制和寄存器"><a href="#剪切复制和寄存器" class="headerlink" title="剪切复制和寄存器"></a>剪切复制和寄存器</h2><h3 id="剪切和复制、粘贴"><a href="#剪切和复制、粘贴" class="headerlink" title="剪切和复制、粘贴"></a>剪切和复制、粘贴</h3><ul><li>[n]x: 剪切光标右边n个字符，相当于d[n]l。</li><li>[n]X: 剪切光标左边n个字符，相当于d[n]h。</li><li>y: 复制在可视模式下选中的文本。</li><li>yy or Y: 复制整行文本。</li><li>y[n]w: 复制一(n)个词。</li><li>y[n]l: 复制光标右边1(n)个字符。</li><li>y[n]h: 复制光标左边1(n)个字符。</li><li>y$: 从光标当前位置复制到行尾。</li><li>y0: 从光标当前位置复制到行首。</li><li>:m,ny<cr> 复制m行到n行的内容。</li><li>y1G或ygg: 复制光标以上的所有行。</li><li>yG: 复制光标以下的所有行。</li><li>yaw和yas：复制一个词和复制一个句子，即使光标不在词首和句首也没关系。</li><li>d: 删除（剪切）在可视模式下选中的文本。</li><li>d$ or D: 删除（剪切）当前位置到行尾的内容。</li><li>d[n]w: 删除（剪切）1(n)个单词</li><li>d[n]l: 删除（剪切）光标右边1(n)个字符。</li><li>d[n]h: 删除（剪切）光标左边1(n)个字符。</li><li>d0: 删除（剪切）当前位置到行首的内容</li><li>[n] dd: 删除（剪切）1(n)行。</li><li>:m,nd<cr> 剪切m行到n行的内容。</li><li>d1G或dgg: 剪切光标以上的所有行。</li><li>dG: 剪切光标以下的所有行。</li><li>daw和das：剪切一个词和剪切一个句子，即使光标不在词首和句首也没关系。</li><li>d&#x2F;f<cr>：这是一个比较高级的组合命令，它将删除当前位置 到下一个f之间的内容。</li><li>p: 在光标之后粘贴。</li><li>P: 在光标之前粘贴。</li></ul><h3 id="文本对象"><a href="#文本对象" class="headerlink" title="文本对象"></a>文本对象</h3><ul><li>aw：一个词</li><li>as：一句。</li><li>ap：一段。</li><li>ab：一块（包含在圆括号中的）。</li><li>y, d, c, v都可以跟文本对象。</li><li>6.3 寄存器</li><li>a-z：都可以用作寄存器名。”ayy把当前行的内容放入a寄存器。</li><li>A-Z：用大写字母索引寄存器，可以在寄存器中追加内容。 如”Ayy把当前行的内容追加到a寄存器中。</li><li>:reg 显示所有寄存器的内容。</li><li>“”：不加寄存器索引时，默认使用的寄存器。</li><li>“*：当前选择缓冲区，”*yy把当前行的内容放入当前选择缓冲区。</li><li>“+：系统剪贴板。”+yy把当前行的内容放入系统剪贴板。</li></ul><h2 id="查找与替换"><a href="#查找与替换" class="headerlink" title="查找与替换"></a>查找与替换</h2><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><ul><li><p>&#x2F;something: 在后面的文本中查找something。</p></li><li><p>?something: 在前面的文本中查找something。</p></li><li><p>&#x2F;pattern&#x2F;+number: 将光标停在包含pattern的行后面第number行上。</p></li><li><p>&#x2F;pattern&#x2F;-number: 将光标停在包含pattern的行前面第number行上。</p></li><li><p>n: 向后查找下一个。</p></li><li><p>N: 向前查找下一个。</p></li><li><p>可以用grep或vimgrep查找一个模式都在哪些地方出现过，</p></li><li><p>其中:grep是调用外部的grep程序，而:vimgrep是vim自己的查找算法。</p></li><li><p>用法为： :vim[grep]&#x2F;pattern&#x2F;[g] [j] files</p></li><li><p>g的含义是如果一个模式在一行中多次出现，则这一行也在结果中多次出现。</p></li><li><p>j的含义是grep结束后，结果停在第j项，默认是停在第一项。</p></li><li><p>vimgrep前面可以加数字限定搜索结果的上限，如</p></li><li><p>:1vim&#x2F;pattern&#x2F; % 只查找那个模式在本文件中的第一个出现。</p></li><li><p>其实vimgrep在读纯文本电子书时特别有用，可以生成导航的目录。</p></li><li><p>比如电子书中每一节的标题形式为：n. xxxx。你就可以这样：</p></li><li><p>:vim&#x2F;^d{1,}.&#x2F; %</p></li><li><p>然后用:cw或:copen查看结果，可以用C-w H把quickfix窗口移到左侧， 就更像个目录了。</p><h3 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h3></li><li><p>:s&#x2F;old&#x2F;new - 用new替换当前行第一个old。</p></li><li><p>:s&#x2F;old&#x2F;new&#x2F;g - 用new替换当前行所有的old。</p></li><li><p>:n1,n2s&#x2F;old&#x2F;new&#x2F;g - 用new替换文件n1行到n2行所有的old。</p></li><li><p>:%s&#x2F;old&#x2F;new&#x2F;g - 用new替换文件中所有的old。</p></li><li><p>:%s&#x2F;^&#x2F;xxx&#x2F;g - 在每一行的行首插入xxx，^表示行首。</p></li><li><p>:%s&#x2F;$&#x2F;xxx&#x2F;g - 在每一行的行尾插入xxx，$表示行尾。</p></li><li><p>所有替换命令末尾加上c，每个替换都将需要用户确认。 如：%s&#x2F;old&#x2F;new&#x2F;gc，加上i则忽略大小写(ignore)。</p></li><li><p>还有一种比替换更灵活的方式，它是匹配到某个模式后执行某种命令，</p></li><li><p>语法为 :[range]g&#x2F;pattern&#x2F;command</p></li><li><p>例如 :%g&#x2F;^ xyz&#x2F;normal dd。</p></li><li><p>表示对于以一个空格和xyz开头的行执行normal模式下的dd命令。</p></li><li><p>关于range的规定为：</p></li><li><p>如果不指定range，则表示当前行。</p></li><li><p>m,n: 从m行到n行。</p></li><li><p>0: 最开始一行（可能是这样）。</p></li><li><p>$: 最后一行</p></li><li><p>.: 当前行</p></li><li><p>%: 所有行</p></li></ul><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><ul><li><p>高级的查找替换就要用到正则表达式。</p></li><li><p>\d: 表示十进制数（我猜的）</p></li><li><p>\s: 表示空格</p></li><li><p>\S: 非空字符</p></li><li><p>\a: 英文字母</p></li><li><p>|: 表示 或</p></li><li><p>.: 表示.</p></li><li><p>{m,n}: 表示m到n个字符。这要和 \s与\a等连用，如 \a{m,n} 表示m 到n个英文字母。</p></li><li><p>{m,}: 表示m到无限多个字符。</p></li><li><p>**: 当前目录下的所有子目录。</p></li><li><p>:help pattern得到更多帮助。</p></li></ul><h2 id="排版"><a href="#排版" class="headerlink" title="排版"></a>排版</h2><h3 id="基本排版"><a href="#基本排版" class="headerlink" title="基本排版"></a>基本排版</h3><ul><li>&lt;&lt; 向左缩进一个shiftwidth</li><li><blockquote><blockquote><p>向右缩进一个shiftwidth</p></blockquote></blockquote></li><li>:ce(nter) 本行文字居中</li><li>:le(ft) 本行文字靠左</li><li>:ri(ght) 本行文字靠右</li><li>gq 对选中的文字重排，即对过长的文字进行断行</li><li>gqq 重排当前行</li><li>gqnq 重排n行</li><li>gqap 重排当前段</li><li>gqnap 重排n段</li><li>gqnj 重排当前行和下面n行</li><li>gqQ 重排当前段对文章末尾</li><li>J 拼接当前行和下一行</li><li>gJ 同 J ，不过合并后不留空格。<h3 id="拼写检查"><a href="#拼写检查" class="headerlink" title="拼写检查"></a>拼写检查</h3></li><li>:set spell－开启拼写检查功能</li><li>:set nospell－关闭拼写检查功能</li><li>]s－移到下一个拼写错误的单词</li><li>[s－作用与上一命令类似，但它是从相反方向进行搜索</li><li>z&#x3D;－显示一个有关拼写错误单词的列表，可从中选择</li><li>zg－告诉拼写检查器该单词是拼写正确的</li><li>zw－与上一命令相反，告诉拼写检查器该单词是拼写错误的<h3 id="统计字数"><a href="#统计字数" class="headerlink" title="统计字数"></a>统计字数</h3></li><li>g ^g可以统计文档字符数，行数。 将光标放在最后一个字符上，用字符数减去行数可以粗略统计中文文档的字数。 以上对 Mac 或 Unix 的文件格式适用。 如果是 Windows 文件格式（即换行符有两个字节），字数的统计方法为： 字符数 - 行数 * 2。</li></ul><h2 id="编辑多个文件"><a href="#编辑多个文件" class="headerlink" title="编辑多个文件"></a>编辑多个文件</h2><h3 id="一次编辑多个文件"><a href="#一次编辑多个文件" class="headerlink" title="一次编辑多个文件"></a>一次编辑多个文件</h3><ul><li><p>我们可以一次打开多个文件，如<br>vi a.txt b.txt c.txt</p></li><li><p>使用:next(:n)编辑下一个文件。</p></li><li><p>:2n 编辑下2个文件。</p></li><li><p>使用:previous或:N编辑上一个文件。</p></li><li><p>使用:wnext，保存当前文件，并编辑下一个文件。</p></li><li><p>使用:wprevious，保存当前文件，并编辑上一个文件。</p></li><li><p>使用:args 显示文件列表。</p></li><li><p>:n filenames或:args filenames 指定新的文件列表。</p></li><li><p>vi -o filenames 在水平分割的多个窗口中编辑多个文件。</p></li><li><p>vi -O filenames 在垂直分割的多个窗口中编辑多个文件。</p></li></ul><h3 id="多标签编辑"><a href="#多标签编辑" class="headerlink" title="多标签编辑"></a>多标签编辑</h3><ul><li>vim -p files: 打开多个文件，每个文件占用一个标签页。</li><li>:tabe, tabnew – 如果加文件名，就在新的标签中打开这个文件， 否则打开一个空缓冲区。</li><li>^w gf – 在新的标签页里打开光标下路径指定的文件。</li><li>:tabn – 切换到下一个标签。Control + PageDown，也可以。</li><li>:tabp – 切换到上一个标签。Control + PageUp，也可以。</li><li>[n] gt – 切换到下一个标签。如果前面加了 n ， 就切换到第n个标签。第一个标签的序号就是1。</li><li>:tab split – 将当前缓冲区的内容在新页签中打开。</li><li>:tabc[lose] – 关闭当前的标签页。</li><li>:tabo[nly] – 关闭其它的标签页。</li><li>:tabs – 列出所有的标签页和它们包含的窗口。</li><li>:tabm[ove] [N] – 移动标签页，移动到第N个标签页之后。 如 tabm 0 当前标签页，就会变成第一个标签页。</li></ul><h2 id="缓冲区"><a href="#缓冲区" class="headerlink" title="缓冲区"></a>缓冲区</h2><ul><li>:buffers或:ls或:files 显示缓冲区列表。</li><li>ctrl+^：在最近两个缓冲区间切换。</li><li>:bn – 下一个缓冲区。</li><li>:bp – 上一个缓冲区。</li><li>:bl – 最后一个缓冲区。</li><li>:b[n]或:[n]b – 切换到第n个缓冲区。</li><li>:nbw(ipeout) – 彻底删除第n个缓冲区。</li><li>:nbd(elete) – 删除第n个缓冲区，并未真正删除，还在unlisted列表中。</li><li>:ba[ll] – 把所有的缓冲区在当前页中打开，每个缓冲区占一个窗口。</li></ul><h2 id="分屏编辑"><a href="#分屏编辑" class="headerlink" title="分屏编辑"></a>分屏编辑</h2><ul><li><p>vim -o file1 file2:水平分割窗口，同时打开file1和file2</p></li><li><p>vim -O file1 file2:垂直分割窗口，同时打开file1和file2</p><h3 id="水平分割"><a href="#水平分割" class="headerlink" title="水平分割"></a>水平分割</h3></li><li><p>:split(:sp) – 把当前窗水平分割成两个窗口。(CTRL-W s 或 CTRL-W CTRL-S) 注意如果在终端下，CTRL-S可能会冻结终端，请按CTRL-Q继续。</p></li><li><p>:split filename – 水平分割窗口，并在新窗口中显示另一个文件。</p></li><li><p>:nsplit(:nsp) – 水平分割出一个n行高的窗口。</p></li><li><p>:[N]new – 水平分割出一个N行高的窗口，并编辑一个新文件。 (CTRL-W n或 CTRL-W CTRL-N)</p></li><li><p>ctrl+w f –水平分割出一个窗口，并在新窗口打开名称为光标所在词的文件 。</p></li><li><p>C-w C-^ – 水平分割一个窗口，打开刚才编辑的文件。</p></li></ul><h3 id="垂直分割"><a href="#垂直分割" class="headerlink" title="垂直分割"></a>垂直分割</h3><ul><li>:vsplit(:vsp) – 把当前窗口分割成水平分布的两个窗口。 (CTRL-W v或CTRL CTRL-V)</li><li>:[N]vne[w] – 垂直分割出一个新窗口。</li><li>:vertical 水平分割的命令： 相应的垂直分割。</li></ul><h3 id="关闭子窗口"><a href="#关闭子窗口" class="headerlink" title="关闭子窗口"></a>关闭子窗口</h3><ul><li>:qall – 关闭所有窗口，退出vim。</li><li>:wall – 保存所有修改过的窗口。</li><li>:only – 只保留当前窗口，关闭其它窗口。(CTRL-W o)</li><li>:close – 关闭当前窗口，CTRL-W c能实现同样的功能。 (象 :q :x同样工作 )</li></ul><h3 id="调整窗口大小"><a href="#调整窗口大小" class="headerlink" title="调整窗口大小"></a>调整窗口大小</h3><ul><li>ctrl+w + –当前窗口增高一行。也可以用n增高n行。</li><li>ctrl+w - –当前窗口减小一行。也可以用n减小n行。</li><li>ctrl+w _ –当前窗口扩展到尽可能的大。也可以用n设定行数。</li><li>:resize n – 当前窗口n行高。</li><li>ctrl+w &#x3D; – 所有窗口同样高度。</li><li>n ctrl+w _ – 当前窗口的高度设定为n行。</li><li>ctrl+w &lt; –当前窗口减少一列。也可以用n减少n列。</li><li>ctrl+w &gt; –当前窗口增宽一列。也可以用n增宽n列。</li><li>ctrl+w | –当前窗口尽可能的宽。也可以用n设定列数。</li></ul><h3 id="切换和移动窗口"><a href="#切换和移动窗口" class="headerlink" title="切换和移动窗口"></a>切换和移动窗口</h3><ul><li><p>如果支持鼠标，切换和调整子窗口的大小就简单了。</p></li><li><p>ctrl+w ctrl+w: 切换到下一个窗口。或者是ctrl+w w。</p></li><li><p>ctrl+w p: 切换到前一个窗口。</p></li><li><p>ctrl+w h(l,j,k):切换到左（右，下，上）的窗口。</p></li><li><p>ctrl+w t(b):切换到最上（下）面的窗口。<BR></p></li><li><p>ctrl+w H(L,K,J): 将当前窗口移动到最左（右、上、下）面。</p></li><li><p>ctrl+w r：旋转窗口的位置。</p></li><li><p>ctrl+w T: 将当前的窗口移动到新的标签页上。</p></li></ul><h2 id="快速编辑"><a href="#快速编辑" class="headerlink" title="快速编辑"></a>快速编辑</h2><h3 id="改变大小写"><a href="#改变大小写" class="headerlink" title="改变大小写"></a>改变大小写</h3><ul><li>~: 反转光标所在字符的大小写。</li><li>可视模式下的U或u：把选中的文本变为大写或小写。</li><li>gu(U)接范围（如$，或G），可以把从光标当前位置到指定位置之间字母全部 转换成小写或大写。如ggguG，就是把开头到最后一行之间的字母全部变为小 写。再如gu5j，把当前行和下面四行全部变成小写。</li></ul><h3 id="替换（normal模式）"><a href="#替换（normal模式）" class="headerlink" title="替换（normal模式）"></a>替换（normal模式）</h3><ul><li>r: 替换光标处的字符，同样支持汉字。</li><li>R: 进入替换模式，按esc回到正常模式。</li></ul><h3 id="撤消与重做（normal模式）"><a href="#撤消与重做（normal模式）" class="headerlink" title="撤消与重做（normal模式）"></a>撤消与重做（normal模式）</h3><ul><li>[n] u: 取消一(n)个改动。</li><li>:undo 5 – 撤销5个改变。</li><li>:undolist – 你的撤销历史。</li><li>ctrl + r: 重做最后的改动。</li><li>U: 取消当前行中所有的改动。</li><li>:earlier 4m – 回到4分钟前</li><li>:later 55s – 前进55秒</li></ul><h3 id="宏"><a href="#宏" class="headerlink" title="宏"></a>宏</h3><ul><li>. –重复上一个编辑动作</li><li>qa：开始录制宏a（键盘操作记录）</li><li>q：停止录制</li><li>@a：播放宏a</li></ul><h2 id="编辑特殊文件"><a href="#编辑特殊文件" class="headerlink" title="编辑特殊文件"></a>编辑特殊文件</h2><h3 id="文件加解密"><a href="#文件加解密" class="headerlink" title="文件加解密"></a>文件加解密</h3><ul><li><p>vim -x file: 开始编辑一个加密的文件。</p></li><li><p>:X – 为当前文件设置密码。</p></li><li><p>:set key&#x3D; – 去除文件的密码。<br>这里是 滇狐总结的比较高级的vi技巧。</p><h3 id="文件的编码"><a href="#文件的编码" class="headerlink" title="文件的编码"></a>文件的编码</h3></li><li><p>:e ++enc&#x3D;utf8 filename, 让vim用utf-8的编码打开这个文件。</p></li><li><p>:w ++enc&#x3D;gbk，不管当前文件什么编码，把它转存成gbk编码。</p></li><li><p>:set fenc或:set fileencoding，查看当前文件的编码。</p></li><li><p>在vimrc中添加set fileencoding&#x3D;ucs-bom,utf-8,cp936，vim会根据要打开的文件选择合适的编码。 注意：编码之间不要留空格。 cp936对应于gbk编码。 ucs-bom对应于windows下的文件格式。</p></li><li><p>让vim 正确处理文件格式和文件编码，有赖于 ~&#x2F;.vimrc的正确配置</p><h3 id="文件格式"><a href="#文件格式" class="headerlink" title="文件格式"></a>文件格式</h3></li><li><p>大致有三种文件格式：unix, dos, mac. 三种格式的区别主要在于回车键的编码：dos 下是回车加换行，unix 下只有 换行符，mac 下只有回车符。</p></li><li><p>:e ++ff&#x3D;dos filename, 让vim用dos格式打开这个文件。</p></li><li><p>:w ++ff&#x3D;mac filename, 以mac格式存储这个文件。</p></li><li><p>:set ff，显示当前文件的格式。</p></li><li><p>在vimrc中添加set fileformats&#x3D;unix,dos,mac，让vim自动识别文件格式。</p></li></ul><h2 id="编程辅助"><a href="#编程辅助" class="headerlink" title="编程辅助"></a>编程辅助</h2><h3 id="一些按键"><a href="#一些按键" class="headerlink" title="一些按键"></a>一些按键</h3><ul><li><p>gd: 跳转到局部变量的定义处；</p></li><li><p>gD: 跳转到全局变量的定义处，从当前文件开头开始搜索；</p></li><li><p>g;: 上一个修改过的地方；</p></li><li><p>g,: 下一个修改过的地方；</p></li><li><p>[[: 跳转到上一个函数块开始，需要有单独一行的{。</p></li><li><p>]]: 跳转到下一个函数块开始，需要有单独一行的{。</p></li><li><p>[]: 跳转到上一个函数块结束，需要有单独一行的}。</p></li><li><p>][: 跳转到下一个函数块结束，需要有单独一行的}。</p></li><li><p>[{: 跳转到当前块开始处；</p></li><li><p>]}: 跳转到当前块结束处；</p></li><li><p>[&#x2F;: 跳转到当前注释块开始处；</p></li><li><p>]&#x2F;: 跳转到当前注释块结束处；</p></li><li><p>%: 不仅能移动到匹配的(),{}或[]上，而且能在#if，#else， #endif之间跳跃。</p></li><li><p>下面的括号匹配对编程很实用的。</p></li><li><p>ci’, di’, yi’：修改、剪切或复制’之间的内容。</p></li><li><p>ca’, da’, ya’：修改、剪切或复制’之间的内容，包含’。</p></li><li><p>ci”, di”, yi”：修改、剪切或复制”之间的内容。</p></li><li><p>ca”, da”, ya”：修改、剪切或复制”之间的内容，包含”。</p></li><li><p>ci(, di(, yi(：修改、剪切或复制()之间的内容。</p></li><li><p>ca(, da(, ya(：修改、剪切或复制()之间的内容，包含()。</p></li><li><p>ci[, di[, yi[：修改、剪切或复制[]之间的内容。</p></li><li><p>ca[, da[, ya[：修改、剪切或复制[]之间的内容，包含[]。</p></li><li><p>ci{, di{, yi{：修改、剪切或复制{}之间的内容。</p></li><li><p>ca{, da{, ya{：修改、剪切或复制{}之间的内容，包含{}。</p></li><li><p>ci&lt;, di&lt;, yi&lt;：修改、剪切或复制&lt;&gt;之间的内容。</p></li><li><p>ca&lt;, da&lt;, ya&lt;：修改、剪切或复制&lt;&gt;之间的内容，包含&lt;&gt;。</p></li></ul><h3 id="ctags"><a href="#ctags" class="headerlink" title="ctags"></a>ctags</h3><ul><li><p>ctags -R: 生成tag文件，-R表示也为子目录中的文件生成tags</p></li><li><p>:set tags&#x3D;path&#x2F;tags – 告诉ctags使用哪个tag文件</p></li><li><p>:tag xyz – 跳到xyz的定义处，或者将光标放在xyz上按C-]，返回用C-t</p></li><li><p>:stag xyz – 用分割的窗口显示xyz的定义，或者C-w ]， 如果用C-w n ]，就会打开一个n行高的窗口</p></li><li><p>:ptag xyz – 在预览窗口中打开xyz的定义，热键是C-w }。</p></li><li><p>:pclose – 关闭预览窗口。热键是C-w z。</p></li><li><p>:pedit abc.h – 在预览窗口中编辑abc.h</p></li><li><p>:psearch abc – 搜索当前文件和当前文件include的文件，显示包含abc的行。</p></li><li><p>有时一个tag可能有多个匹配，如函数重载，一个函数名就会有多个匹配。 这种情况会先跳转到第一个匹配处。</p></li><li><p>:[n]tnext – 下一[n]个匹配。</p></li><li><p>:[n]tprev – 上一[n]个匹配。</p></li><li><p>:tfirst – 第一个匹配</p></li><li><p>:tlast – 最后一个匹配</p></li><li><p>:tselect tagname – 打开选择列表</p></li><li><p>tab键补齐</p></li></ul><p>&#x3D; :tag xyz<tab> – 补齐以xyz开头的tag名，继续按tab键，会显示其他的。</p><ul><li>:tag &#x2F;xyz<tab> – 会用名字中含有xyz的tag名补全。</li></ul><h3 id="cscope"><a href="#cscope" class="headerlink" title="cscope"></a>cscope</h3><ul><li>cscope -Rbq: 生成cscope.out文件</li><li>:cs add &#x2F;path&#x2F;to&#x2F;cscope.out &#x2F;your&#x2F;work&#x2F;dir</li><li>:cs find c func – 查找func在哪些地方被调用</li><li>:cw – 打开quickfix窗口查看结果</li></ul><h3 id="gtags"><a href="#gtags" class="headerlink" title="gtags"></a>gtags</h3><ul><li><p>Gtags综合了ctags和cscope的功能。 使用Gtags之前，你需要安装GNU Gtags。 然后在工程目录运行 gtags 。</p></li><li><p>:Gtags funcname 定位到 funcname 的定义处。</p></li><li><p>:Gtags -r funcname 查询 funcname被引用的地方。</p></li><li><p>:Gtags -s symbol 定位 symbol 出现的地方。</p></li><li><p>:Gtags -g string Goto string 出现的地方。 :Gtags -gi string 忽略大小写。</p></li><li><p>:Gtags -f filename 显示 filename 中的函数列表。 你可以用 :Gtags -f % 显示当前文件。</p></li><li><p>:Gtags -P pattern 显示路径中包含特定模式的文件。 如 :Gtags -P .h$ 显示所有头文件， :Gtags -P &#x2F;vm&#x2F; 显示vm目录下的文件。</p></li></ul><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><ul><li><p>vim提供了:make来编译程序，默认调用的是make， 如果你当前目录下有makefile，简单地:make即可。</p></li><li><p>如果你没有make程序，你可以通过配置makeprg选项来更改make调用的程序。 如果你只有一个abc.java文件，你可以这样设置：</p></li><li><p>set makeprg&#x3D;javac\ abc.java</p></li><li><p>然后:make即可。如果程序有错，可以通过quickfix窗口查看错误。 不过如果要正确定位错误，需要设置好errorformat，让vim识别错误信息。 如：</p></li><li><p>:setl efm&#x3D;%A%f:%l:\ %m,%-Z%p^,%-C%.%#</p></li><li><p>%f表示文件名，%l表示行号， %m表示错误信息，其它的还不能理解。 请参考 :help errorformat。</p><h3 id="快速修改窗口"><a href="#快速修改窗口" class="headerlink" title="快速修改窗口"></a>快速修改窗口</h3></li><li><p>其实是quickfix插件提供的功能， 对编译调试程序非常有用 :)</p></li><li><p>:copen – 打开快速修改窗口。</p></li><li><p>:cclose – 关闭快速修改窗口。</p></li><li><p>快速修改窗口在make程序时非常有用，当make之后：</p></li><li><p>:cl – 在快速修改窗口中列出错误。</p></li><li><p>:cn – 定位到下一个错误。</p></li><li><p>:cp – 定位到上一个错误。</p></li><li><p>:cr – 定位到第一个错误。</p></li></ul><h3 id="自动补全"><a href="#自动补全" class="headerlink" title="自动补全"></a>自动补全</h3><ul><li>C-x C-s – 拼写建议。</li><li>C-x C-v – 补全vim选项和命令。</li><li>C-x C-l – 整行补全。</li><li>C-x C-f – 自动补全文件路径。弹出菜单后，按C-f循环选择，当然也可以按 C-n和C-p。</li><li>C-x C-p 和C-x C-n – 用文档中出现过的单词补全当前的词。 直接按C-p和C-n也可以。</li><li>C-x C-o – 编程时可以补全关键字和函数名啊。</li><li>C-x C-i – 根据头文件内关键字补全。</li><li>C-x C-d – 补全宏定义。</li><li>C-x C-n – 按缓冲区中出现过的关键字补全。 直接按C-n或C-p即可。</li><li>当弹出补全菜单后：</li><li>C-p 向前切换成员；</li><li>C-n 向后切换成员；</li><li>C-e 退出下拉菜单，并退回到原来录入的文字；</li><li>C-y 退出下拉菜单，并接受当前选项。</li></ul><h3 id="多行缩进缩出"><a href="#多行缩进缩出" class="headerlink" title="多行缩进缩出"></a>多行缩进缩出</h3><ul><li>正常模式下，按两下&gt;;光标所在行会缩进。</li><li>如果先按了n，再按两下&gt;;，光标以下的n行会缩进。</li><li>对应的，按两下&lt;;，光标所在行会缩出。</li><li>如果在编辑代码文件，可以用&#x3D;进行调整。</li><li>在可视模式下，选择要调整的代码块，按&#x3D;，代码会按书写规则缩排好。</li><li>或者n &#x3D;，调整n行代码的缩排。</li></ul><h3 id="折叠"><a href="#折叠" class="headerlink" title="折叠"></a>折叠</h3><ul><li>zf – 创建折叠的命令，可以在一个可视区域上使用该命令；</li><li>zd – 删除当前行的折叠；</li><li>zD – 删除当前行的折叠；</li><li>zfap – 折叠光标所在的段；</li><li>zo – 打开折叠的文本；</li><li>zc – 收起折叠；</li><li>za – 打开&#x2F;关闭当前折叠；</li><li>zr – 打开嵌套的折行；</li><li>zm – 收起嵌套的折行；</li><li>zR (zO) – 打开所有折行；</li><li>zM (zC) – 收起所有折行；</li><li>zj – 跳到下一个折叠处；</li><li>zk – 跳到上一个折叠处；</li><li>zi – enable&#x2F;disable fold;</li></ul><h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h2><ul><li><p>normal模式下按:进入命令行模式</p><h3 id="命令行模式下的快捷键："><a href="#命令行模式下的快捷键：" class="headerlink" title="命令行模式下的快捷键："></a>命令行模式下的快捷键：</h3></li><li><p>上下方向键：上一条或者下一条命令。如果已经输入了部分命令，则找上一 条或者下一条匹配的命令。</p></li><li><p>左右方向键：左&#x2F;右移一个字符。</p></li><li><p>C-w： 向前删除一个单词。</p></li><li><p>C-h： 向前删除一个字符，等同于Backspace。</p></li><li><p>C-u： 从当前位置移动到命令行开头。</p></li><li><p>C-b： 移动到命令行开头。</p></li><li><p>C-e： 移动到命令行末尾。</p></li><li><p>Shift-Left： 左移一个单词。</p></li><li><p>Shift-Right： 右移一个单词。</p></li><li><p>@： 重复上一次的冒号命令。</p></li><li><p>q： 正常模式下，q然后按’:’，打开命令行历史缓冲区， 可以像编辑文件一样编辑命令。</p></li><li><p>q&#x2F;和q? 可以打开查找历史记录。</p></li></ul><h3 id="执行外部命令"><a href="#执行外部命令" class="headerlink" title="执行外部命令"></a>执行外部命令</h3><ul><li>:! cmd 执行外部命令。</li><li>:!! 执行上一次的外部命令。</li><li>:sh 调用shell，用exit返回vim。</li><li>:r !cmd 将命令的返回结果插入文件当前位置。</li><li>:m,nw !cmd 将文件的m行到n行之间的内容做为命令输入执行命令。</li></ul><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h3 id="工作目录"><a href="#工作目录" class="headerlink" title="工作目录"></a>工作目录</h3><ul><li>:pwd 显示vim的工作目录。</li><li>:cd path 改变vim的工作目录。</li><li>:set autochdir 可以让vim 根据编辑的文件自动切换工作目录。</li></ul><h3 id="一些快捷键（收集中）"><a href="#一些快捷键（收集中）" class="headerlink" title="一些快捷键（收集中）"></a>一些快捷键（收集中）</h3><ul><li>K: 打开光标所在词的manpage。</li><li>*: 向下搜索光标所在词。</li><li>g*: 同上，但部分符合即可。</li><li>#: 向上搜索光标所在词。</li><li>g#: 同上，但部分符合即可。</li><li>g C-g: 统计全文或统计部分的字数。</li></ul><h3 id="在线帮助"><a href="#在线帮助" class="headerlink" title="在线帮助"></a>在线帮助</h3><ul><li>:h(elp)或F1 打开总的帮助。</li><li>:help user-manual 打开用户手册。</li><li>命令帮助的格式为：第一行指明怎么使用那个命令； 然后是缩进的一段解释这个命令的作用，然后是进一步的信息。</li><li>:helptags somepath 为somepath中的文档生成索引。</li><li>:helpgrep 可以搜索整个帮助文档，匹配的列表显示在quickfix窗口中。</li><li>Ctrl+] 跳转到tag主题，Ctrl+t 跳回。</li><li>:ver 显示版本信息。</li></ul><h3 id="一些小功能"><a href="#一些小功能" class="headerlink" title="一些小功能"></a>一些小功能</h3><ul><li>简单计算器: 在插入模式下，输入C-r &#x3D;，然后输入表达式，就能在 光标处得到计算结果。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> neovim </tag>
            
            <tag> 炼狱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macbook效率工具的使用</title>
      <link href="/2022/05/14/macbook%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/05/14/macbook%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="background工具的使用"><a href="#background工具的使用" class="headerlink" title="background工具的使用"></a>background工具的使用</h2><h2 id="alttab工具的使用"><a href="#alttab工具的使用" class="headerlink" title="alttab工具的使用"></a>alttab工具的使用</h2><h2 id="rectangle工具的使用"><a href="#rectangle工具的使用" class="headerlink" title="rectangle工具的使用"></a>rectangle工具的使用</h2>]]></content>
      
      
      
        <tags>
            
            <tag> macbokk </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac从入门到痴迷之iterm2和oh-my-zsh</title>
      <link href="/2022/05/11/mac%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%97%B4%E8%BF%B7%E4%B9%8Biterm2%E5%92%8Coh-my-zsh/"/>
      <url>/2022/05/11/mac%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%97%B4%E8%BF%B7%E4%B9%8Biterm2%E5%92%8Coh-my-zsh/</url>
      
        <content type="html"><![CDATA[<h1 id="iterm2的安装"><a href="#iterm2的安装" class="headerlink" title="iterm2的安装"></a>iterm2的安装</h1>]]></content>
      
      
      <categories>
          
          <category>  note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macos </tag>
            
            <tag> iterm2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无线网络基于macos的学习</title>
      <link href="/2022/05/11/%E6%97%A0%E7%BA%BF%E7%BD%91%E7%BB%9C%E5%9F%BA%E4%BA%8Emacbook%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/05/11/%E6%97%A0%E7%BA%BF%E7%BD%91%E7%BB%9C%E5%9F%BA%E4%BA%8Emacbook%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="无线网络笔记汇总"><a href="#无线网络笔记汇总" class="headerlink" title="无线网络笔记汇总"></a>无线网络笔记汇总</h1><hr><ul><li>一些自己学习的东西</li></ul><hr><ul><li><p>苹果的用户会有个MDNS管理我猜测这应该是投屏或者icloud实现的一种功能性,在局域网中实现所以在混杂模式下我的wireshark抓到很多连上学校网络的MDNS上面包括了苹果用户的host和sourceIP ip地址<br>每个进入局域网的主机，如果开启了mDNS服务的话，都会向局域网内的所有主机组播一个消息，我是谁，和我的IP地址是多少。然后其他也有该服务的主机就会响应，也会告诉你，它是谁，它的IP地址是多少。mDNS的域名与普通DNS的域名是通过后缀.local区分开来的。如果一台终端需要访问一个mDNS域名，他就会向局域网内发送组播，询问该域名的IP是多少。<br>MDNS<a href="https://xz.aliyun.com/t/9171">https://xz.aliyun.com/t/9171</a>  这个网站写的很详细mac的MDNS伪造等等</p></li><li><p>还有就是rarp协议(反向地址解析协议)反向地址解析协议 (RARP) 是局域网 (LAN) 中的物理机可以用来请求其 IP 地址的协议。它通过将设备的物理地址发送到位于同一 LAN 上并主动侦听 RARP 请求的专用 RARP 服务器来实现此目的。</p></li></ul><h2 id="802-11-帧格式和分类"><a href="#802-11-帧格式和分类" class="headerlink" title=" 802.11 帧格式和分类"></a><a href="https://www.cnblogs.com/rougungun/p/14340489.html" class="link"> 802.11 </a>帧格式和分类</h2><ul><li>数据帧  type&#x3D;10</li><li>控制帧  type&#x3D;01</li><li>管理帧  type&#x3D;00<br><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/wifi_00.png" alt="pic_!"> <h2 id="管理帧"><a href="#管理帧" class="headerlink" title="管理帧"></a>管理帧</h2></li></ul><p>它的主要作用是维护接入点和无线客户端之间的通信，管理帧框架拥有一下类型:</p><ul><li>Authentication Request&#x2F;Response(用于认证操作)</li><li>DeAuthentication(用于去掉认帧)</li><li>Association Request</li><li>Association Response</li><li>Reassociation Request</li><li>Reassociation Response</li><li>Disassocation</li><li>Beacon(AP发出用于通过被动扫描发现AP)</li><li>probe Request(用于主动扫描发现AP)</li><li>Probe Response(用于主动扫描发现AP)<br><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/wifi_01.png" alt="pic_01"> <h2 id="控制帧"><a href="#控制帧" class="headerlink" title="控制帧"></a>控制帧</h2></li></ul><p>控制帧是负责客户端和接入点的数据交换，类型为：</p><ul><li>Requeset to Send(RTS)</li><li>Clear to Send(CTS)</li><li>Acknowledgenment(ACK)<br><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/wifi_02.png" alt="pic_02"></li></ul><h2 id="数据帧"><a href="#数据帧" class="headerlink" title="数据帧"></a>数据帧</h2><p>携带传输的数据的帧，类型主要有：</p><ul><li>DHCP</li><li>TCP</li><li>Http</li><li>EAPOL-key</li><li>802.11 Flag<br><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/wifi_03.png" alt="pic_03"> <h2 id="wireshark的基本使用"><a href="#wireshark的基本使用" class="headerlink" title="wireshark的基本使用"></a>wireshark的基本使用</h2>过滤表达式的语法<br><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/wifi_04.png" alt="pic_04"></li></ul><hr><ul><li>HTTP协议数据包过滤举例</li></ul><hr><p><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/wifi_05.png" alt="pic_05"> </p><ul><li>TCP和UDP协议数据包过滤举例</li></ul><p><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/wifi_06.png" alt="pic_06"> </p><ul><li>一些例子</li></ul><p><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/wifi_07.png" alt="pic_07"><br><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/wifi_08.png" alt="pic_08"> </p><h2 id="airport命令"><a href="#airport命令" class="headerlink" title="airport命令"></a>airport命令</h2><p>查询命令即可知道 </p><ul><li><input disabled="" type="checkbox"> curl cheat.sh&#x2F;airport</li><li><input disabled="" type="checkbox"> aiprot sniff(嗅探) 1(信道) 打开监听模式</li><li>如果要在苹果电脑上进行嗅探模式我建议用苹果自带的嗅探工具更为方便唯一的缺点就是不能用实时的抓取数据  </li><li>如果要实时抓取数据可以在打开嗅探模式后再打开wirshark打开监听模式就能实时抓取到wifi数据包<br><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/20220511101720.png" alt="aa"><br><kbd class="keybord"> option </kbd> + <kbd class="keybord"> click </kbd> + <kbd class="keybord"> wifi </kbd> + <kbd class="keybord"> 窗体 </kbd> + <kbd class="keybord"> 嗅探器 </kbd>&amp;ensp;<br>打开嗅探器可以选择信道和频率一般情况下它会自动选择连接对应wifi的信道和频率</li><li>如果不知道此wifi在哪个信道扫描工具可以显示wifi的具体信息</li></ul><hr><ul><li><input disabled="" type="checkbox"> sudo airport -s #查看所有可以被发现的wifi功能跟无线诊断的扫描功能类似<br><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/20220511102649.png" alt="pic_011"> </li><li>注意！执行wifi一些操作时常常需要sudo可能因为苹果的安全设计<br><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/20220511101438.png"> </li><li><input disabled="" type="checkbox"> airport -I </li><li>查看当前无线状态信息<h2 id="aircrack-ng可以实现对wiif握手包的抓取和字典破解功能"><a href="#aircrack-ng可以实现对wiif握手包的抓取和字典破解功能" class="headerlink" title="aircrack-ng可以实现对wiif握手包的抓取和字典破解功能"></a><a href="https://www.cnblogs.com/halberd-lee/p/11400347.html">aircrack-ng可以实现对wiif握手包的抓取和字典破解功能</a></h2></li></ul><h2 id="hydra"><a href="#hydra" class="headerlink" title="hydra"></a>hydra</h2><ul><li>字典破解工具也可以用hydra 他的用途就很光了可以破解更重 <a href="https://blog.csdn.net/weixin_44847002/article/details/106627562">hydra</a></li></ul><h2 id="生成字典工具"><a href="#生成字典工具" class="headerlink" title="生成字典工具"></a>生成字典工具</h2>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macbook </tag>
            
            <tag> 破解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫python语言入门学习</title>
      <link href="/2022/05/10/%E7%88%AC%E8%99%ABpython%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/05/10/%E7%88%AC%E8%99%ABpython%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="爬虫笔记"><a href="#爬虫笔记" class="headerlink" title="爬虫笔记"></a>爬虫笔记</h1><h2 id="requests包命令介绍"><a href="#requests包命令介绍" class="headerlink" title="requests包命令介绍"></a>requests包命令介绍</h2><ul><li>安装requests和引用<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install requests</span><br><span class="line">import requests</span><br></pre></td></tr></table></figure><h3 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">request.get(&#x27;url&#x27;)</span><br></pre></td></tr></table></figure></li><li><input disabled="" type="checkbox"> params参数<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">r = requests.get(&#x27;https://www.douban.com/search&#x27;, params=&#123;&#x27;q&#x27;: &#x27;python&#x27;, &#x27;cat&#x27;: &#x27;1001&#x27;&#125;)</span><br><span class="line">r.url # 实际请求的URL</span><br><span class="line">&#x27;https://www.douban.com/search?q=python&amp;cat=1001&#x27;</span><br></pre></td></tr></table></figure><h3 id="encoding参数"><a href="#encoding参数" class="headerlink" title="encoding参数"></a>encoding参数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">r.encoding  </span><br><span class="line">recoding=&#x27;utf-8&#x27;</span><br><span class="line">可以指定参数不过request自动检测编码</span><br></pre></td></tr></table></figure><h3 id="headers参数"><a href="#headers参数" class="headerlink" title="headers参数"></a>headers参数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">r = requests.get(&#x27;https://www.douban.com/&#x27;, headers=&#123;&#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit&#x27;&#125;)</span><br><span class="line">可以直接在里面写也可以先给headers命名一个参数然后里面用headers代替</span><br></pre></td></tr></table></figure><h3 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h3></li><li><input disabled="" type="checkbox"> 只需要吧<code>get()</code>方法变成<code>post()</code>,然后传入<code>data</code>参数作为post请求的数据<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">r = requests.post(&#x27;https://accounts.douban.com/login&#x27;, data=&#123;&#x27;form_email&#x27;: &#x27;abc@example.com&#x27;, &#x27;form_password&#x27;: &#x27;123456&#x27;&#125;)</span><br></pre></td></tr></table></figure></li><li><input disabled="" type="checkbox"> requests默认使用<code>application/x-www-form-urlencoded</code>对POST数据编码。如果要传递JSON数据，可以直接传入json参数：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">params = &#123;&#x27;key&#x27;: &#x27;value&#x27;&#125;</span><br><span class="line">r = requests.post(url, json=params) # 内部自动序列化为JSON</span><br></pre></td></tr></table></figure></li><li><input disabled="" type="checkbox"> 类似的，上传文件需要更复杂的编码格式，但是<code>requests</code>把它简化成<code>files</code>参数：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upload_files = &#123;&#x27;file&#x27;: open(&#x27;report.xls&#x27;, &#x27;rb&#x27;)&#125;</span><br><span class="line">r = requests.post(url, files=upload_files)</span><br></pre></td></tr></table></figure></li><li><input disabled="" type="checkbox"> requests对Cookie做了特殊处理，使得我们不必解析Cookie就可以轻松获取指定的Cookie：</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">r.cookies[&#x27;ts&#x27;]</span><br><span class="line">&#x27;example_cookie_12345&#x27;</span><br></pre></td></tr></table></figure><ul><li><input disabled="" type="checkbox"> 传入cookies跟headers类似 </li><li>如果要制定时间单位为秒在里面家timeout参数</li></ul><h2 id="数据选择的三种方式"><a href="#数据选择的三种方式" class="headerlink" title="数据选择的三种方式"></a>数据选择的三种方式</h2><ul><li><input disabled="" type="checkbox"> bs4</li><li><input disabled="" type="checkbox"> re正则表达式</li><li><input disabled="" type="checkbox"> xpath</li></ul><h2 id="re包介绍（正则表达式"><a href="#re包介绍（正则表达式" class="headerlink" title="re包介绍（正则表达式)"></a>re包介绍<a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017639890281664">（正则表达式)</a></h2><ul><li><input disabled="" type="checkbox"> 在正则表达式中，如果直接给出字符，就是精确匹配。用<code>\d</code>可以匹配一个数字，<code>\w</code>可以匹配一个字母或数字，所以：</li><li>所以<code>&#39;00\d&#39;</code>可以匹配<code>&#39;007&#39;</code>，但无法匹配<code>&#39;00A&#39;</code>；</li><li><code>&#39;\d\d\d&#39;</code>可以匹配<code>&#39;010&#39;</code>；</li><li><code>&#39;\w\w\d&#39;</code>可以匹配<code>&#39;py3&#39;</code>；</li><li><input disabled="" type="checkbox"> .可以匹配任意字符</li><li><code>&#39;py.&#39;</code>可以匹配<code>&#39;pyc&#39;</code>、<code>&#39;pyo&#39;</code>、<code>&#39;py!&#39;</code><br>要匹配变长的字符，在正则表达式中，用<code>*</code>表示任意个字符（包括0个），用<code>+</code>表示至少一个字符，用<code>?表示0个或1个字符，用</code>{n}<code>表示n个字符，用</code>{n,m}&#96;表示n-m个字符：</li><li><input disabled="" type="checkbox"> <code>[]</code>表示范围</li><li><code>[0-9a-zA-Z\_]</code>可以匹配一个数字、字母或者下划线；</li><li><code>[a-zA-Z\_][0-9a-zA-Z\_]&#123;0, 19&#125;</code>更精确地限制了变量的长度是1-20个字符（前面1个字符+后面最多19个字符）</li><li><input disabled="" type="checkbox"> 犹豫python本省用\转义所以<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s = &#x27;ABC\\-001&#x27; # Python的字符串</span><br><span class="line"># 对应的正则表达式字符串变成：</span><br><span class="line"># &#x27;ABC\-001&#x27;</span><br></pre></td></tr></table></figure></li><li>[  ] 还有一种方式不用转义<code>r</code>前缀<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s = r&#x27;ABC\-001&#x27; # Python的字符串</span><br><span class="line"># 对应的正则表达式字符串不变：</span><br><span class="line"># &#x27;ABC\-001&#x27;</span><br></pre></td></tr></table></figure><h2 id="xpath链接"><a href="#xpath链接" class="headerlink" title="xpath链接"></a>xpath<a href="https://www.w3school.com.cn/xpath/xpath_syntax.asp">链接</a></h2></li><li>XPath 使用路径表达式来选取 XML 文档中的节点或节点集。节点是通过沿着路径 (path) 或者步 (steps) 来选取的。</li></ul><table><thead><tr><th align="center">表达式</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">&#x2F;</td><td align="center">从根结点开始选取</td></tr><tr><td align="center">&#x2F;&#x2F;</td><td align="center">从匹配选择的当前节点选择文档中的节点不考虑位置这个&#x2F;&#x2F;很随意</td></tr><tr><td align="center">nodename</td><td align="center">选取此节点的所有子节点。</td></tr><tr><td align="center">.</td><td align="center">选取当前节点。</td></tr><tr><td align="center">..</td><td align="center">选取当前节点的父节点。</td></tr><tr><td align="center">@</td><td align="center">选取属性。</td></tr></tbody></table><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><table><thead><tr><th align="center">路径的表达</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">bookstore</td><td align="center">选取 bookstore 元素的所有子节点。</td></tr><tr><td align="center">&#x2F;bookstore</td><td align="center">选取根元素 bookstore。注释：假如路径起始于正斜杠( &#x2F; )，则此路径始终代表到某元素的绝对路径！</td></tr><tr><td align="center">bookstore&#x2F;book</td><td align="center">选取属于 bookstore 的子元素的所有 book 元素。</td></tr><tr><td align="center">&#x2F;&#x2F;book</td><td align="center">选取所有 book 子元素，而不管它们在文档中的位置。</td></tr><tr><td align="center">bookstore&#x2F;&#x2F;book</td><td align="center">选择属于 bookstore 元素的后代的所有 book 元素，而不管它们位于 bookstore 之下的什么位置。</td></tr><tr><td align="center">&#x2F;&#x2F;@lang</td><td align="center">选取名为 lang 的所有属性。</td></tr></tbody></table><h3 id="谓语"><a href="#谓语" class="headerlink" title="谓语"></a>谓语</h3><ul><li>谓语用来查找某个特定的节点或者包含某个指定的值的节点。谓语被嵌在方括号中。</li><li><input disabled="" type="checkbox"> 实例</li></ul><table><thead><tr><th align="center">路径表达式</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">&#x2F;bookstore&#x2F;book[1]</td><td align="center">选取属于 bookstore 子元素的第一个 book 元素。</td></tr><tr><td align="center">&#x2F;bookstore&#x2F;book[last()]</td><td align="center">选取属于 bookstore 子元素的最后一个 book 元素。</td></tr><tr><td align="center">&#x2F;bookstore&#x2F;book[last()-1]</td><td align="center">选取属于 bookstore 子元素的倒数第二个 book 元素。</td></tr><tr><td align="center">&#x2F;bookstore&#x2F;book[position()&lt;3]</td><td align="center">选取最前面的两个属于 bookstore 元素的子元素的 book 元素。</td></tr><tr><td align="center">&#x2F;&#x2F;title[@lang]</td><td align="center">选取所有拥有名为 lang 的属性的 title 元素。</td></tr><tr><td align="center">&#x2F;&#x2F;title[@lang&#x3D;’eng’]</td><td align="center">选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性。</td></tr><tr><td align="center">&#x2F;bookstore&#x2F;book[price&gt;35.00]</td><td align="center">选取 bookstore 元素的所有 book 元素，且其中的 price 元素的值须大于 35.00。</td></tr><tr><td align="center">&#x2F;bookstore&#x2F;book[price&gt;35.00]&#x2F;title</td><td align="center">选取 bookstore 元素中的 book 元素的所有 title 元素，且其中的 price 元素的值须大于 35.00。</td></tr></tbody></table><h3 id="json包"><a href="#json包" class="headerlink" title="json包"></a><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017624706151424">json包</a></h3><p>如果我们要在不同的编程语言之间传递对象，就必须把对象序列化为标准格式，比如XML，但更好的方法是序列化为JSON，因为JSON表示出来就是一个字符串，可以被所有语言读取，也可以方便地存储到磁盘或者通过网络传输。JSON不仅是标准格式，并且比XML更快，而且可以直接在Web页面中读取，非常方便。</p><p>JSON表示的对象就是标准的JavaScript语言的对象，JSON和Python内置的数据类型对应如下：</p><ul><li>{}  dict</li><li>[]  list</li><li>“string”  str</li><li>123.56 int或float</li><li>true&#x2F;false   True&#x2F;float</li><li>null      noner</li><li><input disabled="" type="checkbox"> 举例下面可以把pthon对象转换到json格式的转换<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import json</span><br><span class="line">d = dict(name=&#x27;Bob&#x27;, age=20, score=88)</span><br><span class="line">json.dumps(d)</span><br><span class="line">&#x27;&#123;&quot;age&quot;: 20, &quot;score&quot;: 88, &quot;name&quot;: &quot;Bob&quot;&#125;&#x27;</span><br></pre></td></tr></table></figure></li><li>json.dumps() 将 Python 对象编码成 JSON 字符串</li><li>json.loads() 将已编码的 JSON 字符串解码为 Python 对象</li></ul><h2 id="csv模块"><a href="#csv模块" class="headerlink" title="csv模块"></a><a href="https://docs.python.org/zh-cn/3/library/csv.html">csv模块</a></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -- coding: utf-8 --</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;https://voice.baidu.com/act/newpneumonia/newpneumonia/?from=osari_aladin_banner&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re <span class="comment">#正则表达式</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;user-agent&#x27;</span>:</span><br><span class="line">    <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.54 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.csv&#x27;</span>, mode=<span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    csv_writer = csv.writer(f)</span><br><span class="line">    csv_writer.writerow([<span class="string">&#x27;area&#x27;</span>,<span class="string">&#x27;curConfirm&#x27;</span>,<span class="string">&#x27;confirmed&#x27;</span>,<span class="string">&#x27;curConfirmRelative&#x27;</span>,<span class="string">&#x27;crued&#x27;</span>,<span class="string">&#x27;died&#x27;</span>])</span><br><span class="line">url = <span class="string">&#x27;https://voice.baidu.com/act/newpneumonia/newpneumonia/?from=osari_aladin_banner&#x27;</span></span><br><span class="line">response = requests.get(url=url, headers=headers) <span class="comment">#发送请求</span></span><br><span class="line"><span class="comment">#print(response) &lt;200&gt;访问成功</span></span><br><span class="line"><span class="comment">#print(response.text)</span></span><br><span class="line">html_data = response.text</span><br><span class="line"><span class="comment">#解析数据</span></span><br><span class="line">json_str = re.findall(<span class="string">&#x27;&quot;component&quot;:\[(.*)\],&#x27;</span>, html_data)[<span class="number">0</span>]</span><br><span class="line"><span class="comment">#print(json_str)</span></span><br><span class="line">json_dict = json.loads(json_str)</span><br><span class="line">caseList = json_dict[<span class="string">&#x27;caseList&#x27;</span>]</span><br><span class="line">caseOutsideList=json_dict[<span class="string">&quot;caseOutsideList&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> case <span class="keyword">in</span> caseList:</span><br><span class="line">    area = case[<span class="string">&#x27;area&#x27;</span>] <span class="comment">#省份</span></span><br><span class="line">    curConfirm = case[<span class="string">&quot;curConfirm&quot;</span>]<span class="comment">#确证</span></span><br><span class="line">    confirmed = case[<span class="string">&quot;confirmed&quot;</span>]  <span class="comment"># 累计确证</span></span><br><span class="line">    curConfirmRelative = case[<span class="string">&quot;curConfirmRelative&quot;</span>]<span class="comment">#当前确证</span></span><br><span class="line">    crued = case[<span class="string">&quot;crued&quot;</span>]<span class="comment">#累计治愈</span></span><br><span class="line">    died = case[<span class="string">&quot;died&quot;</span>]<span class="comment">#累计死亡</span></span><br><span class="line"> <span class="comment">#   print(area, curConfirm, curConfirmRelative, died, crued, confirmed)</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.csv&#x27;</span>,mode=<span class="string">&#x27;a&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>,newline=<span class="string">&#x27;&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">        csv_writer=csv.writer(f)</span><br><span class="line">        csv_writer.writerow([area,curConfirm,confirmed,curConfirmRelative,crued,died])</span><br></pre></td></tr></table></figure><ul><li><input disabled="" type="checkbox"> 一个简单的爬虫程序csv_writer.writerow作用是写入这些字典当中的数据</li></ul><h2 id="panda导入数据模块"><a href="#panda导入数据模块" class="headerlink" title="panda导入数据模块"></a><a href="https://zhuanlan.zhihu.com/p/90925476">panda导入数据模块</a></h2><p> <img src="https://raw.githubusercontent.com/deletee-china/-LH_pic/master/img/20220508122652.png" alt="panda_1"> </p><h2 id="案例读取mysql数据库数据"><a href="#案例读取mysql数据库数据" class="headerlink" title="案例读取mysql数据库数据"></a>案例读取mysql数据库数据</h2> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> import pymysql</span><br><span class="line"> import panda as pd</span><br><span class="line"> conn = pymysql.connect(host=&#x27;localhost&#x27;, user=&#x27;root&#x27;, password=&#x27;test&#x27;,database=&#x27;test&#x27;, port=3306, charset=&#x27;utf8&#x27;)</span><br><span class="line">#连接mysql数据库</span><br><span class="line">user = pd.read_sql(&#x27;select * from topy&#x27;, conn)</span><br><span class="line">#读取数据</span><br><span class="line">conn.close()</span><br><span class="line">#关闭连接</span><br><span class="line">print(User)</span><br><span class="line">#数据输出</span><br></pre></td></tr></table></figure><h2 id="selenium自动化web的运用"><a href="#selenium自动化web的运用" class="headerlink" title="selenium自动化web的运用"></a>selenium自动化web的运用</h2><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/20220512184117.png" alt="masss"><br>如上所示我就导入了webdriver和selenium和自动化查找webdriver的操作<br><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/20220512184226.png"> </p><ul><li>如上这事webmanage的一个option功能</li><li><input disabled="" type="checkbox"> .get()打开一个网址<h3 id="规避检测和无头操作的实现"><a href="#规避检测和无头操作的实现" class="headerlink" title="规避检测和无头操作的实现"></a>规避检测和无头操作的实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="comment">#实现规避检测</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ChromeOptions</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="comment">#实现无可视化界面的操作</span></span><br><span class="line">chrome_options=Options()</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#实现规避检测</span></span><br><span class="line">option= ChromeOptions()</span><br><span class="line">option.add_experimental_option(<span class="string">&#x27;excludeSwitches&#x27;</span>,[<span class="string">&#x27;enable-automation&#x27;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#如何实现让seleium怎么规避</span></span><br><span class="line">bro= webdriver.Chrome(executable_path=<span class="string">&#x27;./chromedriver &#x27;</span>,chrome_options=chrome_options,options=option)</span><br></pre></td></tr></table></figure><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3></li><li><input disabled="" type="checkbox"> 需要注意的是find_element_by_xpath()已经被重构</li><li>by 都需要 find_element(By.Xpath,”xxx”)<br><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/20220513000953.png" alt="selen"> </li><li>在对选择器的选择时对明显的<code>text</code>可以选择<code>PATRIAL_LINK_TEXT</code>这是对标签的text值进行搜索算是模糊搜索</li><li><code>XPATH</code>选择时往往需要用到<code>XPATH HELPERS</code>来进行辅助更加方便</li><li>在使用<code>seleium</code>时需要注意的是<code>iframe</code>这决定你是否能够正确的选中你想要的内容</li><li>from selenium.webdriver.common.by import By</li><li><code>by</code>像上面一样引用 ！！！需要注意的是<code>element</code>和<code>elements</code></li><li>获得标签内的属性值是</li><li><code>video_data.get_attribute(&#39;src&#39;)</code>   这样就可以获得<code>video</code>标签内的<code>src</code>属性值<code>get_attribute</code>只能对一个实例进行获得属性值所以当你需要获得一个<code>list</code>的<code>src</code>时你需要通过对<code>list</code>的遍历来获得属性值</li><li><code>selenium</code>虽然好用但是速度上还是<code>requests</code>有优势实例上需要<code>requests</code>和<code>selenium</code>结合运用来进行爬取图片信息啥的我认为<code>selenium</code>的优势就在于他能够比较简单的获取网页的动态源代码然后风险比较少</li></ul><hr><h3 id="实例一"><a href="#实例一" class="headerlink" title="实例一"></a>实例一</h3><ul><li>对壁纸网站4k的爬取<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span>  selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ChromeOptions</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line">option= ChromeOptions()</span><br><span class="line">option.add_experimental_option(<span class="string">&#x27;excludeSwitches&#x27;</span>,[<span class="string">&#x27;enable-automation&#x27;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">YunSpider</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,url</span>):</span><br><span class="line">        self.url=url</span><br><span class="line">        self.driver=webdriver.Chrome(executable_path=<span class="string">&#x27;./chromedriver &#x27;</span>,options=option)</span><br><span class="line">        <span class="comment">#打开网站提取数据翻页</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getcontent</span>(<span class="params">self</span>):</span><br><span class="line">        self.driver.get(self.url)</span><br><span class="line">        <span class="comment">#先进如iframe</span></span><br><span class="line">        self.driver.switch_to.frame(<span class="number">0</span>)<span class="comment">#0代表第一个框</span></span><br><span class="line">        js=<span class="string">&#x27;window.scrollBy(0,8000)&#x27;</span></span><br><span class="line">        self.driver.execute_script(js)</span><br><span class="line">        <span class="comment">#翻页的实现</span></span><br><span class="line">        <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">            selector= self.driver.find_elements(By.XPATH,<span class="string">&#x27;//div[@class=&quot;cmmts j-flag&quot;]/div&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> select <span class="keyword">in</span> selector:</span><br><span class="line">                text=select.find_element(By.XPATH,<span class="string">&#x27;.//div[@class=&quot;cnt f-brk&quot;]&#x27;</span>).text</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span> (<span class="string">&quot;网易云音乐评论.txt&quot;</span>,<span class="string">&#x27;a&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">                    f.write(text+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">#找到下一页的元素然后进行点击 获取文本连接属于模糊匹配</span></span><br><span class="line">            nextPage=self.driver.find_element(By.PARTIAL_LINK_TEXT, <span class="string">&quot;下一页&quot;</span>)</span><br><span class="line">            nextPage.click()</span><br><span class="line">            sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    url=<span class="string">&#x27;https://music.163.com/#/song?id=446557635&#x27;</span></span><br><span class="line">    yunSpider=YunSpider(url)</span><br><span class="line">    yunSpider.getcontent()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="实例二"><a href="#实例二" class="headerlink" title="实例二"></a>实例二</h3></li><li>对在线之家mp4文件的爬取<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span>  selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ChromeOptions</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">chrome_options=Options()</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)</span><br><span class="line">headers = &#123;</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>:</span><br><span class="line">            <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.54 Safari/537.36&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">url=<span class="string">&#x27;https://www.zxzjtv.com/detail/3762.html&#x27;</span></span><br><span class="line">option = ChromeOptions()</span><br><span class="line">option.add_experimental_option(<span class="string">&#x27;excludeSwitches&#x27;</span>, [<span class="string">&#x27;enable-automation&#x27;</span>])</span><br><span class="line">driver = webdriver.Chrome(executable_path=<span class="string">&#x27;./chromedriver &#x27;</span>, options=option,chrome_options=chrome_options)</span><br><span class="line">driver.get(url)</span><br><span class="line">os.mkdir(<span class="string">&quot;神秘海域&quot;</span>)</span><br><span class="line">li_list=driver.find_elements(By.XPATH,<span class="string">&quot;/html/body/div[1]/div/div/div/div/ul[1]/li/a&quot;</span>)</span><br><span class="line">length=<span class="built_in">len</span>(li_list)</span><br><span class="line"><span class="built_in">print</span>(li_list)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,length):</span><br><span class="line">    li_list = driver.find_elements(By.XPATH, <span class="string">&quot;/html/body/div[1]/div/div/div/div/ul[1]/li/a&quot;</span>)</span><br><span class="line">    link=li_list[i]</span><br><span class="line">    url=link.get_attribute(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">    mp4_name=link.text</span><br><span class="line">    <span class="built_in">print</span>(url,mp4_name)</span><br><span class="line">    driver.get(url)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    driver.switch_to.frame(<span class="number">2</span>)</span><br><span class="line">    mp4_src=driver.find_element(By.XPATH,<span class="string">&#x27;//div[@class=&quot;dplayer-video-wrap&quot;]/video&#x27;</span>)</span><br><span class="line">    mp4_src2=mp4_src.get_attribute(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(mp4_src2)</span><br><span class="line">    response=requests.get(mp4_src2,headers=headers).content</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;正在在下&quot;</span>)</span><br><span class="line">    sss=<span class="string">&quot;神秘海域/&quot;</span>+mp4_name+<span class="string">&#x27;.mp4&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span> (sss,<span class="string">&#x27;wb&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">           f.write(response)</span><br><span class="line">    <span class="built_in">print</span>(mp4_name+<span class="string">&quot;下载完成&quot;</span>)</span><br><span class="line">    driver.back()</span><br></pre></td></tr></table></figure><h2 id="scrapy框架的学习"><a href="#scrapy框架的学习" class="headerlink" title="scrapy框架的学习"></a>scrapy框架的学习</h2></li><li><input disabled="" type="checkbox"> 安装<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install scrapy</span><br></pre></td></tr></table></figure></li><li>scrapy -h</li><li>scrapy命令行格式：&gt;scrapy <command> [options][args]</li><li>scrapy常用命令：</li><li>startproject—创建一个新工程—scrapy startproject <name> [dir]</li><li>genspider—创建一个爬虫—scrapy genspider [options] <name> <domains></li><li>settings—获得爬虫配置—scrapy settings [options]</li><li>crawl—运行一个爬虫—scrapy crawl <spider></li><li>list—列出工程中所有爬虫—scrapy list</li><li>shell—启动url调试命令行—scrapy shell [url]<h3 id="scrapy的架构"><a href="#scrapy的架构" class="headerlink" title="scrapy的架构"></a>scrapy的架构</h3><img src="https://pic2.zhimg.com/v2-5f5b947bf2802e7e3aa4e553baf80131_b.jpg"><br><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/20220513002323.png"></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo框架入门学习</title>
      <link href="/2022/05/08/hexo%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/05/08/hexo%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="博客框架hexo本地的安装说明"><a href="#博客框架hexo本地的安装说明" class="headerlink" title="博客框架hexo本地的安装说明"></a>博客框架hexo本地的安装说明</h1><ul><li>前提准备了解<code>hexo</code>框架安装需要什么依赖</li><li><code>hexo</code>依赖<code>nodejs</code> 然后库的传输需要<code>git</code><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2></li><li><input disabled="" type="checkbox"> 通常来说本地环境的安装比服务器更容易搭建因为服务器环境往往需要考虑更多比如安全问题还有各种安装问题就比如我<code>centos8.2</code>的yum yum update了一下居然报错了发现没有这个源查了一下原来是cetos官网已经不对<code>centos8</code>支持</li><li><code>macos</code>使用<code>hombrew</code>下载<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install git </span><br><span class="line">brew install nodejs</span><br></pre></td></tr></table></figure></li><li><code>centos</code> 可以使用<code>yum</code>或者<code>weget</code>下载官方解压包自己解压<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install git</span><br><span class="line">yum install nodejs</span><br></pre></td></tr></table></figure><h2 id="安装hexo框架"><a href="#安装hexo框架" class="headerlink" title="安装hexo框架"></a>安装<code>hexo</code>框架</h2></li><li>创建一个文件夹你的<code>hexo</code>框架就下载在里面<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure></li><li><input disabled="" type="checkbox"> 现在你的hexo框架就基本上安装完毕了</li><li>目录应该跟下面大差不差<br><img src="https://raw.githubusercontent.com/deletee-china/-LH_pic/master/img/20220508125145.png" alt="hexo_1"> </li><li><code>config.yml</code>就是hexo的配置文件一些关于hexo的配置在里面配置<h2 id="hexo一些基本使用"><a href="#hexo一些基本使用" class="headerlink" title="hexo一些基本使用"></a>hexo一些基本使用</h2> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new post &quot;name&quot; #新建文章</span><br><span class="line">hexo g  #渲染</span><br><span class="line">hexo s  #部署到本地</span><br><span class="line">hexo d  #部署到远程git库</span><br></pre></td></tr></table></figure><h2 id="git库的连接"><a href="#git库的连接" class="headerlink" title="git库的连接"></a><code>git库</code>的连接</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;username&quot;</span><br><span class="line">git config --global user.email &quot;1941689965@qq.com&quot;</span><br><span class="line">用户名和邮箱自行修改</span><br></pre></td></tr></table></figure></li><li>用<code>ssh</code>的话还需要获取<code>ssh</code>的公钥 </li><li>如果你不知道有没有一般来说ssh的共钥如果有就放在你家目录下的.ssh文件中<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></li><li>如果有就是上面那条命令查看公钥</li><li>没有就创建一个key<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;1941689965@qq.com&quot;</span><br></pre></td></tr></table></figure></li><li>然后重复之前的操作开查看密钥<h2 id="远程库"><a href="#远程库" class="headerlink" title="远程库"></a>远程库</h2></li><li><input disabled="" type="checkbox"> 远程库的选择(github，码云上都有类似服务Pages一个静态网站,你也可以把你的库推送到你的服务器上)</li><li>githubpage由于访问速度的关系不推荐有条件的话可以买个云轻量应用服务器,注册一个域名当然如果在服务器上搭建网站服务器在国内也需要备案</li><li>gittee还没有使用过不做评价<h2 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h2><h3 id="20022-x2F-5-x2F-10-底部美化shields-io"><a href="#20022-x2F-5-x2F-10-底部美化shields-io" class="headerlink" title="20022&#x2F;5&#x2F;10 底部美化shields.io"></a>20022&#x2F;5&#x2F;10 底部美化<a href="https://shields.io/">shields.io</a></h3><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/20220508174200.png" alt="sss"> </li><li>在主题配置文件的custom_text中添加生成的url连接即可需要有点前段基础<h2 id="美化日志添加壁纸模块"><a href="#美化日志添加壁纸模块" class="headerlink" title="美化日志添加壁纸模块"></a>美化日志添加壁纸模块</h2><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/20220509112009.png"> </li><li>如图在picture模块引用外部标签达到如下效果<br><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/20220509112103.png"><br>连接的图片库跟普通页面创建一样的方法<br>图片模块今天还没具体设置</li></ul><h2 id="2022-x2F-5-x2F-11美化日记"><a href="#2022-x2F-5-x2F-11美化日记" class="headerlink" title="2022&#x2F;5&#x2F;11美化日记"></a>2022&#x2F;5&#x2F;11美化日记</h2><ul><li><input disabled="" type="checkbox"> 发现分类页面还是需要的又重新增加了分类模块</li><li><input disabled="" type="checkbox"> 增加了个人博客的后台功能能够在本地后台访问</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macos系统命令的学习</title>
      <link href="/2022/05/07/macos%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/05/07/macos%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="命令的简介"><a href="#命令的简介" class="headerlink" title="命令的简介"></a>命令的简介</h1><h2 id="open命令"><a href="#open命令" class="headerlink" title="open命令"></a>open命令</h2><h2 id="systemsetup命令"><a href="#systemsetup命令" class="headerlink" title="systemsetup命令"></a>systemsetup命令</h2><h2 id="screencapture命令"><a href="#screencapture命令" class="headerlink" title="screencapture命令"></a>screencapture命令</h2><h2 id="homebrew的使用"><a href="#homebrew的使用" class="headerlink" title="homebrew的使用"></a>homebrew的使用</h2><h2 id="python-文件http-servers的基本使用"><a href="#python-文件http-servers的基本使用" class="headerlink" title="python 文件http.servers的基本使用"></a>python 文件http.servers的基本使用</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -m http.server</span><br><span class="line">python -m http.server:8888</span><br></pre></td></tr></table></figure><h2 id="airport命令"><a href="#airport命令" class="headerlink" title="airport命令"></a>airport命令</h2><h2 id="git库的使用"><a href="#git库的使用" class="headerlink" title="git库的使用"></a>git库的使用</h2><ul><li><input disabled="" type="checkbox"> git 库的工作流程<br><img src="https://lihangsmart.oss-cn-hangzhou.aliyuncs.com/img/20220513104031.png"> </li><li>workspace：工作区</li><li>staging area：暂存区&#x2F;缓存区</li><li>local repository：版本库或本地仓库</li><li>remote repository：远程仓库<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init 初始化仓库</span><br><span class="line">git add 将文件添加到暂存区</span><br><span class="line">git commit 将暂存区的内容添加到仓库中</span><br><span class="line">git clone -b 拷贝一份远程仓库-b选择分支</span><br><span class="line">git status 查看仓库当前的状态</span><br><span class="line">git diff 比较稳健的不同</span><br><span class="line">git log 查看历史提交记录</span><br><span class="line">git remote 远程仓库的操作remote add添加远程库 </span><br><span class="line">git remote -v 查看当前仓库绑定的远程仓库</span><br><span class="line">git pull 下载远程代码并合并</span><br><span class="line">git push 上传远程仓库代码并合并</span><br><span class="line">git reflog 查看工作书树提交记录</span><br><span class="line">git checkout 切换分支或恢复工作树的文件!!危险的一个命令</span><br></pre></td></tr></table></figure><h2 id="ranger文件管理器的使用"><a href="#ranger文件管理器的使用" class="headerlink" title="ranger文件管理器的使用"></a>ranger文件管理器的使用</h2></li></ul><h2 id="neovim的使用和配置"><a href="#neovim的使用和配置" class="headerlink" title="neovim的使用和配置"></a>neovim的使用和配置</h2><h3 id="neovim快捷"><a href="#neovim快捷" class="headerlink" title="neovim快捷"></a>neovim快捷</h3><h3 id="neovim配置文件"><a href="#neovim配置文件" class="headerlink" title="neovim配置文件"></a>neovim配置文件</h3><p>$$## virtualev工具的使用</p><ul><li>虚拟环境其实就是在命令的环境中创建一个python比如3.9的版本啥的然后里面的python执行用当前的虚拟环境常用于避免包之间的冲突<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">virtualenv -p /usr/bin/python3.5 venv #venv 是创建虚拟环境的名字 前面是想创建的版本</span><br><span class="line">source venv/bin/activate</span><br><span class="line">#进入环境是source bin文件下的avtivate</span><br><span class="line">#我记得我下载了一个zsh插件他定义了一些命令能够自动进入环境现在一下子想不起来</span><br><span class="line">deactivate #退出当前环境</span><br><span class="line">#想要删除该环境只要删除这个文件名内的所有内容</span><br></pre></td></tr></table></figure></li></ul><p>权限的切换</p><p>1.普通用户-&gt;root<br>mac打开终端默认是当前登录用户，若要切换到root用户，使用命令：</p><p>第一种：<br>(1) 输入 sudo -i 或者 su - 活着 su - root 然后回车<br>(2) 输入密码，就可以进入root用户<br>(3) 这种方法的终端显示形式为：usernamedeMacBook-Pro:~ root#</p><p>第二种：<br>(1) 输入sudo su然后回车<br>(2) 输入密码，就可以进入root用户<br>(3) 终端显示形式：sh-3.2#</p><p>2.root-&gt;普通用户<br>第一种：从root用户进入你想登陆的普通用户的方法，这里普通用户名用 username 来举例<br>(1) 输入 su - username 然后回车<br>(2) 就可以进入username用户<br>(3) 这种方法的终端显示形式为：usernamedeMacBook-Pro:~ username$</p><p>第二种：<br>(1) 输入su username 然后回车<br>(2) 直接进入username用户<br>(3) 终端显示形式：bash-3.2<br>    vim快捷键<br>gg最前面</p><p>b就是前一个单词的开头 w下一个单词的开头</p><p>GG最后面<br>nyy 复制从光标一下数n行<br>ndd 一样的道理<br>v是选中<br>f什么光标移动最近的什么</p><p>yank all word</p><p>Yaw 复制一个单词</p><p>yy复制整行</p><p>d删除</p><p>u撤销</p><p>:vs垂直切割打开窗口</p><p>:split水平切割打开窗口</p><p>请注意，代替,,;可以用作分隔符。不同的是，在 的情况下from,to，to是相对于当前行的，而在使用时from;to，to是相对于from的地址的！假设您在第 5 行，:1,+1d将删除第 1 行到第 6 行，而:1;+1d只会删除第 1 行和第 2 行。</p><p>该&#x2F;地址可以在另一个地址之前。这允许您堆叠 模式，例如：</p><p>: &#x2F;foo&#x2F;&#x2F;bar&#x2F;&#x2F;quux&#x2F; d<br>这将删除当前行之后包含“foo”的第一行之后包含“bar”的第一行之后包含“quux”的第一行。<br>将’&#x2F;g’或<code>/g</code>放在标记前面以形成动作。</p><p>使用mm记住与标志“M”的当前位置。移动文件，然后通过’m（第一个非空白）或&#96;m（精确列）跳回。退出 Vim 后会记住小写标记，如果你告诉你的 viminfo 文件这样做，请参阅:h viminfo-‘.</p><p>使用mM文件标记“M”来记住当前位置。切换到另一个缓冲区并通过’M或切换回来&#96;M。</p><p>其他动议包括：</p><p>运动跳到..<br>‘[, <code>[先前更改或猛拉的文本的第一行或字符。 &#39;], </code>]先前更改或猛拉的文本的最后一行或字符。<br>‘&lt;, <code>&lt;最后一个视觉选择的起始行或字符。 &#39;&gt;, </code>&gt;最后一个视觉选择的结束行或字符。<br>‘’, &#96;&#96;最近一次跳跃前的位置。<br>‘“, <code>&quot;最后退出当前缓冲区时的位置。 &#39;^, </code>^上次插入停止的位置。<br>‘., <code>.上次更改的位置。 &#39;(, </code>(当前句子的开头。<br>‘), <code>)当前句子的结尾。 &#39;&#123;, </code>{当前段落的开头。<br>‘}, &#96;}当前段落的结尾。<br>也可以在范围内使用标记。您可能之前看到过并想知道它的含义：在可视模式下选择一些文本并执行:，命令行将带有:’&lt;,’&gt;，这意味着以下命令将获得一个表示可视选择的范围。</p><p>使用:marks列出所有标记。阅读中的所有内容:h mark-motions。</p><p>动作、操作符、文本对象<br>动作移动光标。你们都知道h&#x2F; j&#x2F; k&#x2F; l。或w和b。甚至 &#x2F;是一个动作。他们也算一算。2?the<cr>跳转到“the”的倒数第二次出现。</p><p>有关:h navigation所有可用动作，请参阅下面的所有内容。</p><p>运营商作用于文本的区域，例如d，~，gU，&gt;仅举几例。它们在两种情况下使用，正常模式或可视模式。在正常模式下，运算符首先出现，然后是动作，例如&gt;j。在可视模式下，操作员只需对选择进行操作，例如Vjd。</p><p>像动作一样，运算符进行计数，例如2gUw使当前单词的其余部分和下一个单词大写。由于动作和操作符需要计数，所以 2gU2w工作得一样好并且执行gU2w两次。</p><p>查看:h operator所有可用的运算符。使用:set tildeop使~ 充当运营商。</p><p>文本对象作用于周围区域，与作用于一个方向的运动相反。实际上，它们作用于对象，例如整个单词、整个句子、括号之间的所有内容，等等。</p><p>在普通模式下不能使用文本对象来移动光标，因为即使是最熟练的光标也无法同时跳转到两个方向。但是它在可视模式下工作，因为对象的一侧已经被选中，光标只是跳到另一侧。</p><p>文本对象以i(think inner ) 或a(think around ) 开头，后跟一个表示对象的字符。有了i它只能作用在物体本身，与a对象上加上尾随空白。例如diw删除当前单词并ci(更改括号之间的所有内容。</p><p>文本对象进行计数。想象一下((( )))，光标在最内括号上或中间，然后d2a(将删除 2 对内括号和中间的所有内容。</p><p>查看:h text-objects所有可用的文本对象。</p><p>I开头进入输入模式</p><p>A末尾进入输入模式<br>  关机重启命令<br>  shutdown -s 指定时间 在指定时间休眠相当于sleep<br>  reboot     重启    但是shutdown和reboot都得在superroot权限下使用<br>   open命令<br>打开文档使用open命令open 软件名需要到软件绝对地址位置<br>   open -a 使用指定程序打开<br>   -n 是在原软件运行的情况下再打开一个新的软件<br>   brew 命令<br>brew相当于一个app store 下载命令行文件只需要<br>brew install 名字。 下载图形化软件只需要价格cask<br>brew cask install qq 卸载也是一样的uninstall<br>brew search name 联网搜索软件是否存在brew中<br>brew upgrade name 更新软件<br>brea reinstall name 重新安装软件<br>brew info name 查看软件安装地址<br>brew cleanup 清理缓存brew doctor brew故障时使用，查看建议升级</p><p>brew list 查看brew下载的所有软件<br>更改列表、跳转列表<br>最近 100 次更改的位置保存在changelist 中。同一行上的几个小的更改将合并在一起，但位置仍然是最后一个更改的位置（如果您在行中间添加了一些内容）。</p><p>每次跳转时，跳转前的位置都会在jumplist 中记住 。跳转列表最多有 100 个条目。每个窗口都有自己的跳转列表。拆分窗口时，会复制跳转列表。</p><p>跳转是以下命令之一：’, &#96;, G, &#x2F;, ?, n, N, %, (, ), [[, ]], {, }, :s, :tag, L, M,H和开始编辑新文件的命令。</p><p>列表列出所有条目转到旧位置转到较新的位置<br>跳转列表:jumps[count]<c-o>[count]<c-i><br>更改列表:changes[count]g;[count]g,<br>当您列出所有条目时，&gt;将使用一个标记来显示当前位置。通常这将低于位置 1，即最新位置。</p><p>如果您希望在重新启动 Vim 后保留这两个列表，则需要使用 viminfo 文件和:h viminfo-‘.</p><p>注意：最后一次跳转前的位置也保留为一个标记 ，可以跳转到 via&#96;&#96;或’’。</p><p>帮助：</p><p>:h changelist<br>:h jumplist<br>撤销树<br>记住文本状态的最新更改。您可以使用撤消来还原更改并使用重做来重新应用以前还原的更改。</p><p>理解它的重要一点是保存最近更改的数据结构不是 队列而是 树！您的更改是树中的节点，每个（但顶部节点）都有一个父节点。每个节点都保存有关更改的文本和时间的信息。一个分支是一系列节点，从任何一个节点开始，一直到顶部节点。当您撤消更改然后插入其他内容时，会创建新分支。</p><p>ifoo<esc><br>obar<esc><br>obaz<esc><br>u<br>oquux<esc><br>现在你有 3 行，撤销树看起来像这样：</p><pre><code> foo(1)   /bar(2)</code></pre><p>   &#x2F;      <br>baz(3)   quux(4)<br>撤销树有 4 个变化。数字代表创建节点的时间。</p><p>现在有两种方法可以遍历这棵树，我们称它们为branch-wise和 time-wise。</p><p>撤消 ( u) 和重做 ( <c-r>) 以分支方式工作。他们在当前分支上下移动。u将文本状态恢复到节点“bar”之一。另一个u 将进一步将文本状态恢复到节点“foo”之一。现在<c-r> 回到节点“bar”<c-r>的状态，再回到节点“quux”的状态。（再也无法使用分支命令到达节点“baz”了。）</p><p>反对这一点，g-并g+按时工作。因此，g-不会像那样恢复到节点“bar”的状态u，而是恢复到按时间顺序排列的先前状态，节点“baz”。另一个g-将状态恢复为节点“bar”等。因此，g-与g+简单地来回走的时间，分别。</p><p>命令&#x2F;映射行动<br>[count]u, :undo [count]撤消 [count] 次更改。<br>[count]<c-r>, :redo重做 [count] 个更改。<br>U撤消对最新更改行的所有更改。<br>[count]g-, :earlier [count]?转到旧文本状态 [count] 次。这 ”？” 可以是“s”、“m”、“h”、“d”或“f”。例如:earlier 2d从 2 天前转到文本状态。:earlier 1f将进入最新文件保存的状态。<br>[count]g+, :later [count]?同上，但方向不同。<br>撤销树保存在内存中，当 Vim 退出时会丢失。有关如何启用持久撤消的信息，请参阅撤消文件。</p><p>如果您对撤销树感到困惑， undotree在可视化它方面做得很好。</p><p>帮助：</p><p>:h undo.txt<br>:h usr_32</p><p>export HOMEBREW_BOTTLE_DOMAIN&#x3D;’’</p><h3 id="光标控制"><a href="#光标控制" class="headerlink" title="光标控制"></a>光标控制</h3><ul><li>ctrl + a: 到行首</li><li>ctrl + e: 行末</li><li>ctrl + f&#x2F;b: 前进后退，相当于左右方向键，但是显然比移开手按方向键更快</li><li>ctrl + p: 上一条命令，相当于方向键上</li><li>ctrl + r: 搜索命令历史，这个大家都应该很熟悉了</li><li>ctrl + d: 删除当前字符</li><li>ctrl + h: 删除之前的字符</li><li>ctrl + w: 删除光标前的单词</li><li>ctrl + k: 删除到文本末尾</li><li>ctrl + t: 交换光标处文本</li><li>⌘ + —&#x2F;+&#x2F;0: 调整字体大小</li><li>⌘ + r:清屏，其实是滚到新的一屏，并没有清空。ctrl + l 也可以做到。</li></ul><h3 id="窗口操作"><a href="#窗口操作" class="headerlink" title="窗口操作"></a>窗口操作</h3><ul><li>新建窗口：shift + command + d（横向）command + d（竖向）</li><li>关闭窗口：shift + command + w</li><li>前一个窗口：command + &#96;</li><li>后一个窗口：command + ~</li><li>进入窗口 1,2,3：option + command + 编号</li></ul><h3 id="标签页操作"><a href="#标签页操作" class="headerlink" title="标签页操作"></a>标签页操作</h3><ul><li>新建标签页: Command + T</li><li>关闭标签页: Command + W</li><li>前一个标签页: Command + 左方向键，Shift + Command + [</li><li>后一个标签页: Command + 右方向键，Shitf + Command + ]</li><li>进入标签页1，2，3…: Command + 标签页编号<br> *Expose 标签页: Option + Command + E（将标签页打撒到全屏，并可以全局搜索所有的标签页）</li></ul><h3 id="面板操作"><a href="#面板操作" class="headerlink" title="面板操作"></a>面板操作</h3><p>垂直分割: Command + D</p><ul><li>水平分割: Shift + Command + D</li><li>前一个面板: Command + [</li><li>后一个面板: Command + ]</li><li>切换到上&#x2F;下&#x2F;左&#x2F;右面板: Option + Command + 上下左右方向键</li></ul><h3 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h3><ul><li>支持自定义全局快捷键用于显示和隐藏iTerm2 Preference -&gt; Keys －&gt; Show&#x2F;hide iTerm2 with a system-wide hotkey 打上勾之后</li><li>进入和退出全屏: Command + Enter</li><li>查看当前终端中光标的位置: Command + &#x2F;</li><li>命令自动补全: Command + ;（很少用这个，还是感觉Zsh的补全更好用）</li><li>开启和关闭背景半透明: Command + u</li><li>清屏（重置当前终端）: Command + r</li></ul><h3 id="位置书签"><a href="#位置书签" class="headerlink" title="位置书签"></a>位置书签</h3><p>在当前会话中按Command + Shift + m可以保存当前位置，之后可以按Command + Shift + j跳回这个位置。</p><h3 id="粘贴历史"><a href="#粘贴历史" class="headerlink" title="粘贴历史"></a>粘贴历史</h3><p>使用Command + Shift + h 可以呼出粘贴历史，支持模糊检索。还可以设置将粘贴历史保存在磁盘上（Preferences -&gt; General）</p><h3 id="即时回放"><a href="#即时回放" class="headerlink" title="即时回放"></a>即时回放</h3><p>使用Command + Opt + b 打开即时回放，按Esc退出。即时回放可以记录终端输出的状态，让你“穿越时间”查看终端内容。默认每个会话最多储存4MB的内容，可以在设置中更改（Preferences -&gt; Genernal -&gt; Instant Replay）。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 命令 </tag>
            
            <tag> macos </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
